// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BMC is an object representing the database table.
type BMC struct {
	ID               string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	ServerID         string    `boil:"server_id" json:"server_id" toml:"server_id" yaml:"server_id"`
	HardwareVendorID string    `boil:"hardware_vendor_id" json:"hardware_vendor_id" toml:"hardware_vendor_id" yaml:"hardware_vendor_id"`
	HardwareModelID  string    `boil:"hardware_model_id" json:"hardware_model_id" toml:"hardware_model_id" yaml:"hardware_model_id"`
	Username         string    `boil:"username" json:"username" toml:"username" yaml:"username"`
	Ipaddress        string    `boil:"ipaddress" json:"ipaddress" toml:"ipaddress" yaml:"ipaddress"`
	CreatedAt        null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt        null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *bmcR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bmcL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BMCColumns = struct {
	ID               string
	ServerID         string
	HardwareVendorID string
	HardwareModelID  string
	Username         string
	Ipaddress        string
	CreatedAt        string
	UpdatedAt        string
}{
	ID:               "id",
	ServerID:         "server_id",
	HardwareVendorID: "hardware_vendor_id",
	HardwareModelID:  "hardware_model_id",
	Username:         "username",
	Ipaddress:        "ipaddress",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
}

var BMCTableColumns = struct {
	ID               string
	ServerID         string
	HardwareVendorID string
	HardwareModelID  string
	Username         string
	Ipaddress        string
	CreatedAt        string
	UpdatedAt        string
}{
	ID:               "bmcs.id",
	ServerID:         "bmcs.server_id",
	HardwareVendorID: "bmcs.hardware_vendor_id",
	HardwareModelID:  "bmcs.hardware_model_id",
	Username:         "bmcs.username",
	Ipaddress:        "bmcs.ipaddress",
	CreatedAt:        "bmcs.created_at",
	UpdatedAt:        "bmcs.updated_at",
}

// Generated where

var BMCWhere = struct {
	ID               whereHelperstring
	ServerID         whereHelperstring
	HardwareVendorID whereHelperstring
	HardwareModelID  whereHelperstring
	Username         whereHelperstring
	Ipaddress        whereHelperstring
	CreatedAt        whereHelpernull_Time
	UpdatedAt        whereHelpernull_Time
}{
	ID:               whereHelperstring{field: "\"bmcs\".\"id\""},
	ServerID:         whereHelperstring{field: "\"bmcs\".\"server_id\""},
	HardwareVendorID: whereHelperstring{field: "\"bmcs\".\"hardware_vendor_id\""},
	HardwareModelID:  whereHelperstring{field: "\"bmcs\".\"hardware_model_id\""},
	Username:         whereHelperstring{field: "\"bmcs\".\"username\""},
	Ipaddress:        whereHelperstring{field: "\"bmcs\".\"ipaddress\""},
	CreatedAt:        whereHelpernull_Time{field: "\"bmcs\".\"created_at\""},
	UpdatedAt:        whereHelpernull_Time{field: "\"bmcs\".\"updated_at\""},
}

// BMCRels is where relationship names are stored.
var BMCRels = struct {
	HardwareModel  string
	HardwareVendor string
	Server         string
}{
	HardwareModel:  "HardwareModel",
	HardwareVendor: "HardwareVendor",
	Server:         "Server",
}

// bmcR is where relationships are stored.
type bmcR struct {
	HardwareModel  *HardwareModel  `boil:"HardwareModel" json:"HardwareModel" toml:"HardwareModel" yaml:"HardwareModel"`
	HardwareVendor *HardwareVendor `boil:"HardwareVendor" json:"HardwareVendor" toml:"HardwareVendor" yaml:"HardwareVendor"`
	Server         *Server         `boil:"Server" json:"Server" toml:"Server" yaml:"Server"`
}

// NewStruct creates a new relationship struct
func (*bmcR) NewStruct() *bmcR {
	return &bmcR{}
}

func (r *bmcR) GetHardwareModel() *HardwareModel {
	if r == nil {
		return nil
	}
	return r.HardwareModel
}

func (r *bmcR) GetHardwareVendor() *HardwareVendor {
	if r == nil {
		return nil
	}
	return r.HardwareVendor
}

func (r *bmcR) GetServer() *Server {
	if r == nil {
		return nil
	}
	return r.Server
}

// bmcL is where Load methods for each relationship are stored.
type bmcL struct{}

var (
	bmcAllColumns            = []string{"id", "server_id", "hardware_vendor_id", "hardware_model_id", "username", "ipaddress", "created_at", "updated_at"}
	bmcColumnsWithoutDefault = []string{"server_id", "hardware_vendor_id", "hardware_model_id", "username", "ipaddress"}
	bmcColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	bmcPrimaryKeyColumns     = []string{"id"}
	bmcGeneratedColumns      = []string{}
)

type (
	// BMCSlice is an alias for a slice of pointers to BMC.
	// This should almost always be used instead of []BMC.
	BMCSlice []*BMC
	// BMCHook is the signature for custom BMC hook methods
	BMCHook func(context.Context, boil.ContextExecutor, *BMC) error

	bmcQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bmcType                 = reflect.TypeOf(&BMC{})
	bmcMapping              = queries.MakeStructMapping(bmcType)
	bmcPrimaryKeyMapping, _ = queries.BindMapping(bmcType, bmcMapping, bmcPrimaryKeyColumns)
	bmcInsertCacheMut       sync.RWMutex
	bmcInsertCache          = make(map[string]insertCache)
	bmcUpdateCacheMut       sync.RWMutex
	bmcUpdateCache          = make(map[string]updateCache)
	bmcUpsertCacheMut       sync.RWMutex
	bmcUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bmcAfterSelectHooks []BMCHook

var bmcBeforeInsertHooks []BMCHook
var bmcAfterInsertHooks []BMCHook

var bmcBeforeUpdateHooks []BMCHook
var bmcAfterUpdateHooks []BMCHook

var bmcBeforeDeleteHooks []BMCHook
var bmcAfterDeleteHooks []BMCHook

var bmcBeforeUpsertHooks []BMCHook
var bmcAfterUpsertHooks []BMCHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BMC) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bmcAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BMC) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bmcBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BMC) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bmcAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BMC) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bmcBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BMC) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bmcAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BMC) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bmcBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BMC) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bmcAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BMC) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bmcBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BMC) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bmcAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBMCHook registers your hook function for all future operations.
func AddBMCHook(hookPoint boil.HookPoint, bmcHook BMCHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		bmcAfterSelectHooks = append(bmcAfterSelectHooks, bmcHook)
	case boil.BeforeInsertHook:
		bmcBeforeInsertHooks = append(bmcBeforeInsertHooks, bmcHook)
	case boil.AfterInsertHook:
		bmcAfterInsertHooks = append(bmcAfterInsertHooks, bmcHook)
	case boil.BeforeUpdateHook:
		bmcBeforeUpdateHooks = append(bmcBeforeUpdateHooks, bmcHook)
	case boil.AfterUpdateHook:
		bmcAfterUpdateHooks = append(bmcAfterUpdateHooks, bmcHook)
	case boil.BeforeDeleteHook:
		bmcBeforeDeleteHooks = append(bmcBeforeDeleteHooks, bmcHook)
	case boil.AfterDeleteHook:
		bmcAfterDeleteHooks = append(bmcAfterDeleteHooks, bmcHook)
	case boil.BeforeUpsertHook:
		bmcBeforeUpsertHooks = append(bmcBeforeUpsertHooks, bmcHook)
	case boil.AfterUpsertHook:
		bmcAfterUpsertHooks = append(bmcAfterUpsertHooks, bmcHook)
	}
}

// One returns a single bmc record from the query.
func (q bmcQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BMC, error) {
	o := &BMC{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for bmcs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BMC records from the query.
func (q bmcQuery) All(ctx context.Context, exec boil.ContextExecutor) (BMCSlice, error) {
	var o []*BMC

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BMC slice")
	}

	if len(bmcAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BMC records in the query.
func (q bmcQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count bmcs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q bmcQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if bmcs exists")
	}

	return count > 0, nil
}

// HardwareModel pointed to by the foreign key.
func (o *BMC) HardwareModel(mods ...qm.QueryMod) hardwareModelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.HardwareModelID),
	}

	queryMods = append(queryMods, mods...)

	return HardwareModels(queryMods...)
}

// HardwareVendor pointed to by the foreign key.
func (o *BMC) HardwareVendor(mods ...qm.QueryMod) hardwareVendorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.HardwareVendorID),
	}

	queryMods = append(queryMods, mods...)

	return HardwareVendors(queryMods...)
}

// Server pointed to by the foreign key.
func (o *BMC) Server(mods ...qm.QueryMod) serverQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ServerID),
	}

	queryMods = append(queryMods, mods...)

	return Servers(queryMods...)
}

// LoadHardwareModel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (bmcL) LoadHardwareModel(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBMC interface{}, mods queries.Applicator) error {
	var slice []*BMC
	var object *BMC

	if singular {
		var ok bool
		object, ok = maybeBMC.(*BMC)
		if !ok {
			object = new(BMC)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBMC)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBMC))
			}
		}
	} else {
		s, ok := maybeBMC.(*[]*BMC)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBMC)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBMC))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bmcR{}
		}
		args = append(args, object.HardwareModelID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bmcR{}
			}

			for _, a := range args {
				if a == obj.HardwareModelID {
					continue Outer
				}
			}

			args = append(args, obj.HardwareModelID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`hardware_models`),
		qm.WhereIn(`hardware_models.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load HardwareModel")
	}

	var resultSlice []*HardwareModel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice HardwareModel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for hardware_models")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for hardware_models")
	}

	if len(hardwareModelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.HardwareModel = foreign
		if foreign.R == nil {
			foreign.R = &hardwareModelR{}
		}
		foreign.R.BMCS = append(foreign.R.BMCS, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.HardwareModelID == foreign.ID {
				local.R.HardwareModel = foreign
				if foreign.R == nil {
					foreign.R = &hardwareModelR{}
				}
				foreign.R.BMCS = append(foreign.R.BMCS, local)
				break
			}
		}
	}

	return nil
}

// LoadHardwareVendor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (bmcL) LoadHardwareVendor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBMC interface{}, mods queries.Applicator) error {
	var slice []*BMC
	var object *BMC

	if singular {
		var ok bool
		object, ok = maybeBMC.(*BMC)
		if !ok {
			object = new(BMC)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBMC)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBMC))
			}
		}
	} else {
		s, ok := maybeBMC.(*[]*BMC)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBMC)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBMC))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bmcR{}
		}
		args = append(args, object.HardwareVendorID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bmcR{}
			}

			for _, a := range args {
				if a == obj.HardwareVendorID {
					continue Outer
				}
			}

			args = append(args, obj.HardwareVendorID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`hardware_vendors`),
		qm.WhereIn(`hardware_vendors.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load HardwareVendor")
	}

	var resultSlice []*HardwareVendor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice HardwareVendor")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for hardware_vendors")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for hardware_vendors")
	}

	if len(hardwareVendorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.HardwareVendor = foreign
		if foreign.R == nil {
			foreign.R = &hardwareVendorR{}
		}
		foreign.R.BMCS = append(foreign.R.BMCS, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.HardwareVendorID == foreign.ID {
				local.R.HardwareVendor = foreign
				if foreign.R == nil {
					foreign.R = &hardwareVendorR{}
				}
				foreign.R.BMCS = append(foreign.R.BMCS, local)
				break
			}
		}
	}

	return nil
}

// LoadServer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (bmcL) LoadServer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBMC interface{}, mods queries.Applicator) error {
	var slice []*BMC
	var object *BMC

	if singular {
		var ok bool
		object, ok = maybeBMC.(*BMC)
		if !ok {
			object = new(BMC)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBMC)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBMC))
			}
		}
	} else {
		s, ok := maybeBMC.(*[]*BMC)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBMC)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBMC))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bmcR{}
		}
		args = append(args, object.ServerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bmcR{}
			}

			for _, a := range args {
				if a == obj.ServerID {
					continue Outer
				}
			}

			args = append(args, obj.ServerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`servers`),
		qm.WhereIn(`servers.id in ?`, args...),
		qmhelper.WhereIsNull(`servers.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Server")
	}

	var resultSlice []*Server
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Server")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for servers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for servers")
	}

	if len(serverAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Server = foreign
		if foreign.R == nil {
			foreign.R = &serverR{}
		}
		foreign.R.BMCS = append(foreign.R.BMCS, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ServerID == foreign.ID {
				local.R.Server = foreign
				if foreign.R == nil {
					foreign.R = &serverR{}
				}
				foreign.R.BMCS = append(foreign.R.BMCS, local)
				break
			}
		}
	}

	return nil
}

// SetHardwareModel of the bmc to the related item.
// Sets o.R.HardwareModel to related.
// Adds o to related.R.BMCS.
func (o *BMC) SetHardwareModel(ctx context.Context, exec boil.ContextExecutor, insert bool, related *HardwareModel) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"bmcs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"hardware_model_id"}),
		strmangle.WhereClause("\"", "\"", 2, bmcPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.HardwareModelID = related.ID
	if o.R == nil {
		o.R = &bmcR{
			HardwareModel: related,
		}
	} else {
		o.R.HardwareModel = related
	}

	if related.R == nil {
		related.R = &hardwareModelR{
			BMCS: BMCSlice{o},
		}
	} else {
		related.R.BMCS = append(related.R.BMCS, o)
	}

	return nil
}

// SetHardwareVendor of the bmc to the related item.
// Sets o.R.HardwareVendor to related.
// Adds o to related.R.BMCS.
func (o *BMC) SetHardwareVendor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *HardwareVendor) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"bmcs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"hardware_vendor_id"}),
		strmangle.WhereClause("\"", "\"", 2, bmcPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.HardwareVendorID = related.ID
	if o.R == nil {
		o.R = &bmcR{
			HardwareVendor: related,
		}
	} else {
		o.R.HardwareVendor = related
	}

	if related.R == nil {
		related.R = &hardwareVendorR{
			BMCS: BMCSlice{o},
		}
	} else {
		related.R.BMCS = append(related.R.BMCS, o)
	}

	return nil
}

// SetServer of the bmc to the related item.
// Sets o.R.Server to related.
// Adds o to related.R.BMCS.
func (o *BMC) SetServer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Server) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"bmcs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"server_id"}),
		strmangle.WhereClause("\"", "\"", 2, bmcPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ServerID = related.ID
	if o.R == nil {
		o.R = &bmcR{
			Server: related,
		}
	} else {
		o.R.Server = related
	}

	if related.R == nil {
		related.R = &serverR{
			BMCS: BMCSlice{o},
		}
	} else {
		related.R.BMCS = append(related.R.BMCS, o)
	}

	return nil
}

// BMCS retrieves all the records using an executor.
func BMCS(mods ...qm.QueryMod) bmcQuery {
	mods = append(mods, qm.From("\"bmcs\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"bmcs\".*"})
	}

	return bmcQuery{q}
}

// FindBMC retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBMC(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*BMC, error) {
	bmcObj := &BMC{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"bmcs\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, bmcObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from bmcs")
	}

	if err = bmcObj.doAfterSelectHooks(ctx, exec); err != nil {
		return bmcObj, err
	}

	return bmcObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BMC) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bmcs provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bmcColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bmcInsertCacheMut.RLock()
	cache, cached := bmcInsertCache[key]
	bmcInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bmcAllColumns,
			bmcColumnsWithDefault,
			bmcColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bmcType, bmcMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bmcType, bmcMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"bmcs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"bmcs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into bmcs")
	}

	if !cached {
		bmcInsertCacheMut.Lock()
		bmcInsertCache[key] = cache
		bmcInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BMC.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BMC) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bmcUpdateCacheMut.RLock()
	cache, cached := bmcUpdateCache[key]
	bmcUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bmcAllColumns,
			bmcPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update bmcs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"bmcs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, bmcPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bmcType, bmcMapping, append(wl, bmcPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update bmcs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for bmcs")
	}

	if !cached {
		bmcUpdateCacheMut.Lock()
		bmcUpdateCache[key] = cache
		bmcUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q bmcQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for bmcs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for bmcs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BMCSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bmcPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"bmcs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, bmcPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in bmc slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all bmc")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BMC) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bmcs provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bmcColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bmcUpsertCacheMut.RLock()
	cache, cached := bmcUpsertCache[key]
	bmcUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			bmcAllColumns,
			bmcColumnsWithDefault,
			bmcColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			bmcAllColumns,
			bmcPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert bmcs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(bmcPrimaryKeyColumns))
			copy(conflict, bmcPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"bmcs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(bmcType, bmcMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bmcType, bmcMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert bmcs")
	}

	if !cached {
		bmcUpsertCacheMut.Lock()
		bmcUpsertCache[key] = cache
		bmcUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single BMC record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BMC) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BMC provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bmcPrimaryKeyMapping)
	sql := "DELETE FROM \"bmcs\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from bmcs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for bmcs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q bmcQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no bmcQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bmcs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bmcs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BMCSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(bmcBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bmcPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"bmcs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bmcPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bmc slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bmcs")
	}

	if len(bmcAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BMC) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBMC(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BMCSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BMCSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bmcPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"bmcs\".* FROM \"bmcs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bmcPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BMCSlice")
	}

	*o = slice

	return nil
}

// BMCExists checks if the BMC row exists.
func BMCExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"bmcs\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if bmcs exists")
	}

	return exists, nil
}

// Exists checks if the BMC row exists.
func (o *BMC) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BMCExists(ctx, exec, o.ID)
}
