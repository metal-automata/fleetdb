// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBMCS(t *testing.T) {
	t.Parallel()

	query := BMCS()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBMCSDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BMC{}
	if err = randomize.Struct(seed, o, bmcDBTypes, true, bmcColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BMC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BMCS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBMCSQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BMC{}
	if err = randomize.Struct(seed, o, bmcDBTypes, true, bmcColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BMC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := BMCS().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BMCS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBMCSSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BMC{}
	if err = randomize.Struct(seed, o, bmcDBTypes, true, bmcColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BMC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BMCSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BMCS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBMCSExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BMC{}
	if err = randomize.Struct(seed, o, bmcDBTypes, true, bmcColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BMC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BMCExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if BMC exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BMCExists to return true, but got false.")
	}
}

func testBMCSFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BMC{}
	if err = randomize.Struct(seed, o, bmcDBTypes, true, bmcColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BMC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	bmcFound, err := FindBMC(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if bmcFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBMCSBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BMC{}
	if err = randomize.Struct(seed, o, bmcDBTypes, true, bmcColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BMC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = BMCS().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBMCSOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BMC{}
	if err = randomize.Struct(seed, o, bmcDBTypes, true, bmcColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BMC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := BMCS().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBMCSAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bmcOne := &BMC{}
	bmcTwo := &BMC{}
	if err = randomize.Struct(seed, bmcOne, bmcDBTypes, false, bmcColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BMC struct: %s", err)
	}
	if err = randomize.Struct(seed, bmcTwo, bmcDBTypes, false, bmcColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BMC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bmcOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bmcTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BMCS().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBMCSCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	bmcOne := &BMC{}
	bmcTwo := &BMC{}
	if err = randomize.Struct(seed, bmcOne, bmcDBTypes, false, bmcColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BMC struct: %s", err)
	}
	if err = randomize.Struct(seed, bmcTwo, bmcDBTypes, false, bmcColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BMC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bmcOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bmcTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BMCS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func bmcBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *BMC) error {
	*o = BMC{}
	return nil
}

func bmcAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *BMC) error {
	*o = BMC{}
	return nil
}

func bmcAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *BMC) error {
	*o = BMC{}
	return nil
}

func bmcBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BMC) error {
	*o = BMC{}
	return nil
}

func bmcAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BMC) error {
	*o = BMC{}
	return nil
}

func bmcBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BMC) error {
	*o = BMC{}
	return nil
}

func bmcAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BMC) error {
	*o = BMC{}
	return nil
}

func bmcBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BMC) error {
	*o = BMC{}
	return nil
}

func bmcAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BMC) error {
	*o = BMC{}
	return nil
}

func testBMCSHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &BMC{}
	o := &BMC{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, bmcDBTypes, false); err != nil {
		t.Errorf("Unable to randomize BMC object: %s", err)
	}

	AddBMCHook(boil.BeforeInsertHook, bmcBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	bmcBeforeInsertHooks = []BMCHook{}

	AddBMCHook(boil.AfterInsertHook, bmcAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	bmcAfterInsertHooks = []BMCHook{}

	AddBMCHook(boil.AfterSelectHook, bmcAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	bmcAfterSelectHooks = []BMCHook{}

	AddBMCHook(boil.BeforeUpdateHook, bmcBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	bmcBeforeUpdateHooks = []BMCHook{}

	AddBMCHook(boil.AfterUpdateHook, bmcAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	bmcAfterUpdateHooks = []BMCHook{}

	AddBMCHook(boil.BeforeDeleteHook, bmcBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	bmcBeforeDeleteHooks = []BMCHook{}

	AddBMCHook(boil.AfterDeleteHook, bmcAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	bmcAfterDeleteHooks = []BMCHook{}

	AddBMCHook(boil.BeforeUpsertHook, bmcBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	bmcBeforeUpsertHooks = []BMCHook{}

	AddBMCHook(boil.AfterUpsertHook, bmcAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	bmcAfterUpsertHooks = []BMCHook{}
}

func testBMCSInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BMC{}
	if err = randomize.Struct(seed, o, bmcDBTypes, true, bmcColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BMC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BMCS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBMCSInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BMC{}
	if err = randomize.Struct(seed, o, bmcDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BMC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(bmcColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := BMCS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBMCToOneHardwareModelUsingHardwareModel(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local BMC
	var foreign HardwareModel

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, bmcDBTypes, false, bmcColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BMC struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, hardwareModelDBTypes, false, hardwareModelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareModel struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.HardwareModelID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.HardwareModel().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddHardwareModelHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *HardwareModel) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := BMCSlice{&local}
	if err = local.L.LoadHardwareModel(ctx, tx, false, (*[]*BMC)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.HardwareModel == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.HardwareModel = nil
	if err = local.L.LoadHardwareModel(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.HardwareModel == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testBMCToOneHardwareVendorUsingHardwareVendor(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local BMC
	var foreign HardwareVendor

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, bmcDBTypes, false, bmcColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BMC struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, hardwareVendorDBTypes, false, hardwareVendorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareVendor struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.HardwareVendorID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.HardwareVendor().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddHardwareVendorHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *HardwareVendor) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := BMCSlice{&local}
	if err = local.L.LoadHardwareVendor(ctx, tx, false, (*[]*BMC)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.HardwareVendor == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.HardwareVendor = nil
	if err = local.L.LoadHardwareVendor(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.HardwareVendor == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testBMCToOneServerUsingServer(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local BMC
	var foreign Server

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, bmcDBTypes, false, bmcColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BMC struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, serverDBTypes, false, serverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Server struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ServerID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Server().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddServerHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Server) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := BMCSlice{&local}
	if err = local.L.LoadServer(ctx, tx, false, (*[]*BMC)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Server == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Server = nil
	if err = local.L.LoadServer(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Server == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testBMCToOneSetOpHardwareModelUsingHardwareModel(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BMC
	var b, c HardwareModel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bmcDBTypes, false, strmangle.SetComplement(bmcPrimaryKeyColumns, bmcColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, hardwareModelDBTypes, false, strmangle.SetComplement(hardwareModelPrimaryKeyColumns, hardwareModelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, hardwareModelDBTypes, false, strmangle.SetComplement(hardwareModelPrimaryKeyColumns, hardwareModelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*HardwareModel{&b, &c} {
		err = a.SetHardwareModel(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.HardwareModel != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.BMCS[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.HardwareModelID != x.ID {
			t.Error("foreign key was wrong value", a.HardwareModelID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.HardwareModelID))
		reflect.Indirect(reflect.ValueOf(&a.HardwareModelID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.HardwareModelID != x.ID {
			t.Error("foreign key was wrong value", a.HardwareModelID, x.ID)
		}
	}
}
func testBMCToOneSetOpHardwareVendorUsingHardwareVendor(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BMC
	var b, c HardwareVendor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bmcDBTypes, false, strmangle.SetComplement(bmcPrimaryKeyColumns, bmcColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, hardwareVendorDBTypes, false, strmangle.SetComplement(hardwareVendorPrimaryKeyColumns, hardwareVendorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, hardwareVendorDBTypes, false, strmangle.SetComplement(hardwareVendorPrimaryKeyColumns, hardwareVendorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*HardwareVendor{&b, &c} {
		err = a.SetHardwareVendor(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.HardwareVendor != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.BMCS[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.HardwareVendorID != x.ID {
			t.Error("foreign key was wrong value", a.HardwareVendorID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.HardwareVendorID))
		reflect.Indirect(reflect.ValueOf(&a.HardwareVendorID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.HardwareVendorID != x.ID {
			t.Error("foreign key was wrong value", a.HardwareVendorID, x.ID)
		}
	}
}
func testBMCToOneSetOpServerUsingServer(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BMC
	var b, c Server

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bmcDBTypes, false, strmangle.SetComplement(bmcPrimaryKeyColumns, bmcColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, serverDBTypes, false, strmangle.SetComplement(serverPrimaryKeyColumns, serverColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serverDBTypes, false, strmangle.SetComplement(serverPrimaryKeyColumns, serverColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Server{&b, &c} {
		err = a.SetServer(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Server != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.BMCS[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ServerID != x.ID {
			t.Error("foreign key was wrong value", a.ServerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ServerID))
		reflect.Indirect(reflect.ValueOf(&a.ServerID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ServerID != x.ID {
			t.Error("foreign key was wrong value", a.ServerID, x.ID)
		}
	}
}

func testBMCSReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BMC{}
	if err = randomize.Struct(seed, o, bmcDBTypes, true, bmcColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BMC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBMCSReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BMC{}
	if err = randomize.Struct(seed, o, bmcDBTypes, true, bmcColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BMC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BMCSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBMCSSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BMC{}
	if err = randomize.Struct(seed, o, bmcDBTypes, true, bmcColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BMC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BMCS().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	bmcDBTypes = map[string]string{`ID`: `uuid`, `ServerID`: `uuid`, `HardwareVendorID`: `uuid`, `HardwareModelID`: `uuid`, `Username`: `text`, `Ipaddress`: `inet`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`}
	_          = bytes.MinRead
)

func testBMCSUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(bmcPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(bmcAllColumns) == len(bmcPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BMC{}
	if err = randomize.Struct(seed, o, bmcDBTypes, true, bmcColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BMC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BMCS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bmcDBTypes, true, bmcPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BMC struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBMCSSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(bmcAllColumns) == len(bmcPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BMC{}
	if err = randomize.Struct(seed, o, bmcDBTypes, true, bmcColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BMC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BMCS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bmcDBTypes, true, bmcPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BMC struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(bmcAllColumns, bmcPrimaryKeyColumns) {
		fields = bmcAllColumns
	} else {
		fields = strmangle.SetComplement(
			bmcAllColumns,
			bmcPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BMCSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBMCSUpsert(t *testing.T) {
	t.Parallel()

	if len(bmcAllColumns) == len(bmcPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := BMC{}
	if err = randomize.Struct(seed, &o, bmcDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BMC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BMC: %s", err)
	}

	count, err := BMCS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, bmcDBTypes, false, bmcPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BMC struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BMC: %s", err)
	}

	count, err = BMCS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
