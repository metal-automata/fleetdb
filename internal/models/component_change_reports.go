// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// ComponentChangeReport is an object representing the database table.
type ComponentChangeReport struct {
	ID                    string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	ReportID              string      `boil:"report_id" json:"report_id" toml:"report_id" yaml:"report_id"`
	ServerID              string      `boil:"server_id" json:"server_id" toml:"server_id" yaml:"server_id"`
	ServerComponentID     null.String `boil:"server_component_id" json:"server_component_id,omitempty" toml:"server_component_id" yaml:"server_component_id,omitempty"`
	ServerComponentName   string      `boil:"server_component_name" json:"server_component_name" toml:"server_component_name" yaml:"server_component_name"`
	ServerComponentTypeID string      `boil:"server_component_type_id" json:"server_component_type_id" toml:"server_component_type_id" yaml:"server_component_type_id"`
	RemoveComponent       null.Bool   `boil:"remove_component" json:"remove_component,omitempty" toml:"remove_component" yaml:"remove_component,omitempty"`
	Serial                string      `boil:"serial" json:"serial" toml:"serial" yaml:"serial"`
	CollectionMethod      string      `boil:"collection_method" json:"collection_method" toml:"collection_method" yaml:"collection_method"`
	Data                  types.JSON  `boil:"data" json:"data" toml:"data" yaml:"data"`
	CreatedAt             null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt             null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *componentChangeReportR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L componentChangeReportL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ComponentChangeReportColumns = struct {
	ID                    string
	ReportID              string
	ServerID              string
	ServerComponentID     string
	ServerComponentName   string
	ServerComponentTypeID string
	RemoveComponent       string
	Serial                string
	CollectionMethod      string
	Data                  string
	CreatedAt             string
	UpdatedAt             string
}{
	ID:                    "id",
	ReportID:              "report_id",
	ServerID:              "server_id",
	ServerComponentID:     "server_component_id",
	ServerComponentName:   "server_component_name",
	ServerComponentTypeID: "server_component_type_id",
	RemoveComponent:       "remove_component",
	Serial:                "serial",
	CollectionMethod:      "collection_method",
	Data:                  "data",
	CreatedAt:             "created_at",
	UpdatedAt:             "updated_at",
}

var ComponentChangeReportTableColumns = struct {
	ID                    string
	ReportID              string
	ServerID              string
	ServerComponentID     string
	ServerComponentName   string
	ServerComponentTypeID string
	RemoveComponent       string
	Serial                string
	CollectionMethod      string
	Data                  string
	CreatedAt             string
	UpdatedAt             string
}{
	ID:                    "component_change_reports.id",
	ReportID:              "component_change_reports.report_id",
	ServerID:              "component_change_reports.server_id",
	ServerComponentID:     "component_change_reports.server_component_id",
	ServerComponentName:   "component_change_reports.server_component_name",
	ServerComponentTypeID: "component_change_reports.server_component_type_id",
	RemoveComponent:       "component_change_reports.remove_component",
	Serial:                "component_change_reports.serial",
	CollectionMethod:      "component_change_reports.collection_method",
	Data:                  "component_change_reports.data",
	CreatedAt:             "component_change_reports.created_at",
	UpdatedAt:             "component_change_reports.updated_at",
}

// Generated where

var ComponentChangeReportWhere = struct {
	ID                    whereHelperstring
	ReportID              whereHelperstring
	ServerID              whereHelperstring
	ServerComponentID     whereHelpernull_String
	ServerComponentName   whereHelperstring
	ServerComponentTypeID whereHelperstring
	RemoveComponent       whereHelpernull_Bool
	Serial                whereHelperstring
	CollectionMethod      whereHelperstring
	Data                  whereHelpertypes_JSON
	CreatedAt             whereHelpernull_Time
	UpdatedAt             whereHelpernull_Time
}{
	ID:                    whereHelperstring{field: "\"component_change_reports\".\"id\""},
	ReportID:              whereHelperstring{field: "\"component_change_reports\".\"report_id\""},
	ServerID:              whereHelperstring{field: "\"component_change_reports\".\"server_id\""},
	ServerComponentID:     whereHelpernull_String{field: "\"component_change_reports\".\"server_component_id\""},
	ServerComponentName:   whereHelperstring{field: "\"component_change_reports\".\"server_component_name\""},
	ServerComponentTypeID: whereHelperstring{field: "\"component_change_reports\".\"server_component_type_id\""},
	RemoveComponent:       whereHelpernull_Bool{field: "\"component_change_reports\".\"remove_component\""},
	Serial:                whereHelperstring{field: "\"component_change_reports\".\"serial\""},
	CollectionMethod:      whereHelperstring{field: "\"component_change_reports\".\"collection_method\""},
	Data:                  whereHelpertypes_JSON{field: "\"component_change_reports\".\"data\""},
	CreatedAt:             whereHelpernull_Time{field: "\"component_change_reports\".\"created_at\""},
	UpdatedAt:             whereHelpernull_Time{field: "\"component_change_reports\".\"updated_at\""},
}

// ComponentChangeReportRels is where relationship names are stored.
var ComponentChangeReportRels = struct {
	ServerComponentType string
	Server              string
}{
	ServerComponentType: "ServerComponentType",
	Server:              "Server",
}

// componentChangeReportR is where relationships are stored.
type componentChangeReportR struct {
	ServerComponentType *ServerComponentType `boil:"ServerComponentType" json:"ServerComponentType" toml:"ServerComponentType" yaml:"ServerComponentType"`
	Server              *Server              `boil:"Server" json:"Server" toml:"Server" yaml:"Server"`
}

// NewStruct creates a new relationship struct
func (*componentChangeReportR) NewStruct() *componentChangeReportR {
	return &componentChangeReportR{}
}

func (r *componentChangeReportR) GetServerComponentType() *ServerComponentType {
	if r == nil {
		return nil
	}
	return r.ServerComponentType
}

func (r *componentChangeReportR) GetServer() *Server {
	if r == nil {
		return nil
	}
	return r.Server
}

// componentChangeReportL is where Load methods for each relationship are stored.
type componentChangeReportL struct{}

var (
	componentChangeReportAllColumns            = []string{"id", "report_id", "server_id", "server_component_id", "server_component_name", "server_component_type_id", "remove_component", "serial", "collection_method", "data", "created_at", "updated_at"}
	componentChangeReportColumnsWithoutDefault = []string{"report_id", "server_id", "server_component_name", "server_component_type_id", "serial", "collection_method", "data"}
	componentChangeReportColumnsWithDefault    = []string{"id", "server_component_id", "remove_component", "created_at", "updated_at"}
	componentChangeReportPrimaryKeyColumns     = []string{"id"}
	componentChangeReportGeneratedColumns      = []string{}
)

type (
	// ComponentChangeReportSlice is an alias for a slice of pointers to ComponentChangeReport.
	// This should almost always be used instead of []ComponentChangeReport.
	ComponentChangeReportSlice []*ComponentChangeReport
	// ComponentChangeReportHook is the signature for custom ComponentChangeReport hook methods
	ComponentChangeReportHook func(context.Context, boil.ContextExecutor, *ComponentChangeReport) error

	componentChangeReportQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	componentChangeReportType                 = reflect.TypeOf(&ComponentChangeReport{})
	componentChangeReportMapping              = queries.MakeStructMapping(componentChangeReportType)
	componentChangeReportPrimaryKeyMapping, _ = queries.BindMapping(componentChangeReportType, componentChangeReportMapping, componentChangeReportPrimaryKeyColumns)
	componentChangeReportInsertCacheMut       sync.RWMutex
	componentChangeReportInsertCache          = make(map[string]insertCache)
	componentChangeReportUpdateCacheMut       sync.RWMutex
	componentChangeReportUpdateCache          = make(map[string]updateCache)
	componentChangeReportUpsertCacheMut       sync.RWMutex
	componentChangeReportUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var componentChangeReportAfterSelectHooks []ComponentChangeReportHook

var componentChangeReportBeforeInsertHooks []ComponentChangeReportHook
var componentChangeReportAfterInsertHooks []ComponentChangeReportHook

var componentChangeReportBeforeUpdateHooks []ComponentChangeReportHook
var componentChangeReportAfterUpdateHooks []ComponentChangeReportHook

var componentChangeReportBeforeDeleteHooks []ComponentChangeReportHook
var componentChangeReportAfterDeleteHooks []ComponentChangeReportHook

var componentChangeReportBeforeUpsertHooks []ComponentChangeReportHook
var componentChangeReportAfterUpsertHooks []ComponentChangeReportHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ComponentChangeReport) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentChangeReportAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ComponentChangeReport) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentChangeReportBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ComponentChangeReport) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentChangeReportAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ComponentChangeReport) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentChangeReportBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ComponentChangeReport) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentChangeReportAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ComponentChangeReport) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentChangeReportBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ComponentChangeReport) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentChangeReportAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ComponentChangeReport) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentChangeReportBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ComponentChangeReport) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentChangeReportAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddComponentChangeReportHook registers your hook function for all future operations.
func AddComponentChangeReportHook(hookPoint boil.HookPoint, componentChangeReportHook ComponentChangeReportHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		componentChangeReportAfterSelectHooks = append(componentChangeReportAfterSelectHooks, componentChangeReportHook)
	case boil.BeforeInsertHook:
		componentChangeReportBeforeInsertHooks = append(componentChangeReportBeforeInsertHooks, componentChangeReportHook)
	case boil.AfterInsertHook:
		componentChangeReportAfterInsertHooks = append(componentChangeReportAfterInsertHooks, componentChangeReportHook)
	case boil.BeforeUpdateHook:
		componentChangeReportBeforeUpdateHooks = append(componentChangeReportBeforeUpdateHooks, componentChangeReportHook)
	case boil.AfterUpdateHook:
		componentChangeReportAfterUpdateHooks = append(componentChangeReportAfterUpdateHooks, componentChangeReportHook)
	case boil.BeforeDeleteHook:
		componentChangeReportBeforeDeleteHooks = append(componentChangeReportBeforeDeleteHooks, componentChangeReportHook)
	case boil.AfterDeleteHook:
		componentChangeReportAfterDeleteHooks = append(componentChangeReportAfterDeleteHooks, componentChangeReportHook)
	case boil.BeforeUpsertHook:
		componentChangeReportBeforeUpsertHooks = append(componentChangeReportBeforeUpsertHooks, componentChangeReportHook)
	case boil.AfterUpsertHook:
		componentChangeReportAfterUpsertHooks = append(componentChangeReportAfterUpsertHooks, componentChangeReportHook)
	}
}

// One returns a single componentChangeReport record from the query.
func (q componentChangeReportQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ComponentChangeReport, error) {
	o := &ComponentChangeReport{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for component_change_reports")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ComponentChangeReport records from the query.
func (q componentChangeReportQuery) All(ctx context.Context, exec boil.ContextExecutor) (ComponentChangeReportSlice, error) {
	var o []*ComponentChangeReport

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ComponentChangeReport slice")
	}

	if len(componentChangeReportAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ComponentChangeReport records in the query.
func (q componentChangeReportQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count component_change_reports rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q componentChangeReportQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if component_change_reports exists")
	}

	return count > 0, nil
}

// ServerComponentType pointed to by the foreign key.
func (o *ComponentChangeReport) ServerComponentType(mods ...qm.QueryMod) serverComponentTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ServerComponentTypeID),
	}

	queryMods = append(queryMods, mods...)

	return ServerComponentTypes(queryMods...)
}

// Server pointed to by the foreign key.
func (o *ComponentChangeReport) Server(mods ...qm.QueryMod) serverQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ServerID),
	}

	queryMods = append(queryMods, mods...)

	return Servers(queryMods...)
}

// LoadServerComponentType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (componentChangeReportL) LoadServerComponentType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeComponentChangeReport interface{}, mods queries.Applicator) error {
	var slice []*ComponentChangeReport
	var object *ComponentChangeReport

	if singular {
		var ok bool
		object, ok = maybeComponentChangeReport.(*ComponentChangeReport)
		if !ok {
			object = new(ComponentChangeReport)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeComponentChangeReport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeComponentChangeReport))
			}
		}
	} else {
		s, ok := maybeComponentChangeReport.(*[]*ComponentChangeReport)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeComponentChangeReport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeComponentChangeReport))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &componentChangeReportR{}
		}
		args = append(args, object.ServerComponentTypeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &componentChangeReportR{}
			}

			for _, a := range args {
				if a == obj.ServerComponentTypeID {
					continue Outer
				}
			}

			args = append(args, obj.ServerComponentTypeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`server_component_types`),
		qm.WhereIn(`server_component_types.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ServerComponentType")
	}

	var resultSlice []*ServerComponentType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ServerComponentType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for server_component_types")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for server_component_types")
	}

	if len(serverComponentTypeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ServerComponentType = foreign
		if foreign.R == nil {
			foreign.R = &serverComponentTypeR{}
		}
		foreign.R.ComponentChangeReports = append(foreign.R.ComponentChangeReports, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ServerComponentTypeID == foreign.ID {
				local.R.ServerComponentType = foreign
				if foreign.R == nil {
					foreign.R = &serverComponentTypeR{}
				}
				foreign.R.ComponentChangeReports = append(foreign.R.ComponentChangeReports, local)
				break
			}
		}
	}

	return nil
}

// LoadServer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (componentChangeReportL) LoadServer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeComponentChangeReport interface{}, mods queries.Applicator) error {
	var slice []*ComponentChangeReport
	var object *ComponentChangeReport

	if singular {
		var ok bool
		object, ok = maybeComponentChangeReport.(*ComponentChangeReport)
		if !ok {
			object = new(ComponentChangeReport)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeComponentChangeReport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeComponentChangeReport))
			}
		}
	} else {
		s, ok := maybeComponentChangeReport.(*[]*ComponentChangeReport)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeComponentChangeReport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeComponentChangeReport))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &componentChangeReportR{}
		}
		args = append(args, object.ServerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &componentChangeReportR{}
			}

			for _, a := range args {
				if a == obj.ServerID {
					continue Outer
				}
			}

			args = append(args, obj.ServerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`servers`),
		qm.WhereIn(`servers.id in ?`, args...),
		qmhelper.WhereIsNull(`servers.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Server")
	}

	var resultSlice []*Server
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Server")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for servers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for servers")
	}

	if len(serverAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Server = foreign
		if foreign.R == nil {
			foreign.R = &serverR{}
		}
		foreign.R.ComponentChangeReports = append(foreign.R.ComponentChangeReports, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ServerID == foreign.ID {
				local.R.Server = foreign
				if foreign.R == nil {
					foreign.R = &serverR{}
				}
				foreign.R.ComponentChangeReports = append(foreign.R.ComponentChangeReports, local)
				break
			}
		}
	}

	return nil
}

// SetServerComponentType of the componentChangeReport to the related item.
// Sets o.R.ServerComponentType to related.
// Adds o to related.R.ComponentChangeReports.
func (o *ComponentChangeReport) SetServerComponentType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServerComponentType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"component_change_reports\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"server_component_type_id"}),
		strmangle.WhereClause("\"", "\"", 2, componentChangeReportPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ServerComponentTypeID = related.ID
	if o.R == nil {
		o.R = &componentChangeReportR{
			ServerComponentType: related,
		}
	} else {
		o.R.ServerComponentType = related
	}

	if related.R == nil {
		related.R = &serverComponentTypeR{
			ComponentChangeReports: ComponentChangeReportSlice{o},
		}
	} else {
		related.R.ComponentChangeReports = append(related.R.ComponentChangeReports, o)
	}

	return nil
}

// SetServer of the componentChangeReport to the related item.
// Sets o.R.Server to related.
// Adds o to related.R.ComponentChangeReports.
func (o *ComponentChangeReport) SetServer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Server) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"component_change_reports\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"server_id"}),
		strmangle.WhereClause("\"", "\"", 2, componentChangeReportPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ServerID = related.ID
	if o.R == nil {
		o.R = &componentChangeReportR{
			Server: related,
		}
	} else {
		o.R.Server = related
	}

	if related.R == nil {
		related.R = &serverR{
			ComponentChangeReports: ComponentChangeReportSlice{o},
		}
	} else {
		related.R.ComponentChangeReports = append(related.R.ComponentChangeReports, o)
	}

	return nil
}

// ComponentChangeReports retrieves all the records using an executor.
func ComponentChangeReports(mods ...qm.QueryMod) componentChangeReportQuery {
	mods = append(mods, qm.From("\"component_change_reports\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"component_change_reports\".*"})
	}

	return componentChangeReportQuery{q}
}

// FindComponentChangeReport retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindComponentChangeReport(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ComponentChangeReport, error) {
	componentChangeReportObj := &ComponentChangeReport{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"component_change_reports\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, componentChangeReportObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from component_change_reports")
	}

	if err = componentChangeReportObj.doAfterSelectHooks(ctx, exec); err != nil {
		return componentChangeReportObj, err
	}

	return componentChangeReportObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ComponentChangeReport) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no component_change_reports provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(componentChangeReportColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	componentChangeReportInsertCacheMut.RLock()
	cache, cached := componentChangeReportInsertCache[key]
	componentChangeReportInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			componentChangeReportAllColumns,
			componentChangeReportColumnsWithDefault,
			componentChangeReportColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(componentChangeReportType, componentChangeReportMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(componentChangeReportType, componentChangeReportMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"component_change_reports\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"component_change_reports\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into component_change_reports")
	}

	if !cached {
		componentChangeReportInsertCacheMut.Lock()
		componentChangeReportInsertCache[key] = cache
		componentChangeReportInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ComponentChangeReport.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ComponentChangeReport) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	componentChangeReportUpdateCacheMut.RLock()
	cache, cached := componentChangeReportUpdateCache[key]
	componentChangeReportUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			componentChangeReportAllColumns,
			componentChangeReportPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update component_change_reports, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"component_change_reports\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, componentChangeReportPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(componentChangeReportType, componentChangeReportMapping, append(wl, componentChangeReportPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update component_change_reports row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for component_change_reports")
	}

	if !cached {
		componentChangeReportUpdateCacheMut.Lock()
		componentChangeReportUpdateCache[key] = cache
		componentChangeReportUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q componentChangeReportQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for component_change_reports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for component_change_reports")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ComponentChangeReportSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), componentChangeReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"component_change_reports\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, componentChangeReportPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in componentChangeReport slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all componentChangeReport")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ComponentChangeReport) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no component_change_reports provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(componentChangeReportColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	componentChangeReportUpsertCacheMut.RLock()
	cache, cached := componentChangeReportUpsertCache[key]
	componentChangeReportUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			componentChangeReportAllColumns,
			componentChangeReportColumnsWithDefault,
			componentChangeReportColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			componentChangeReportAllColumns,
			componentChangeReportPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert component_change_reports, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(componentChangeReportPrimaryKeyColumns))
			copy(conflict, componentChangeReportPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"component_change_reports\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(componentChangeReportType, componentChangeReportMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(componentChangeReportType, componentChangeReportMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert component_change_reports")
	}

	if !cached {
		componentChangeReportUpsertCacheMut.Lock()
		componentChangeReportUpsertCache[key] = cache
		componentChangeReportUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ComponentChangeReport record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ComponentChangeReport) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ComponentChangeReport provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), componentChangeReportPrimaryKeyMapping)
	sql := "DELETE FROM \"component_change_reports\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from component_change_reports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for component_change_reports")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q componentChangeReportQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no componentChangeReportQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from component_change_reports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for component_change_reports")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ComponentChangeReportSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(componentChangeReportBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), componentChangeReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"component_change_reports\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, componentChangeReportPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from componentChangeReport slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for component_change_reports")
	}

	if len(componentChangeReportAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ComponentChangeReport) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindComponentChangeReport(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ComponentChangeReportSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ComponentChangeReportSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), componentChangeReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"component_change_reports\".* FROM \"component_change_reports\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, componentChangeReportPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ComponentChangeReportSlice")
	}

	*o = slice

	return nil
}

// ComponentChangeReportExists checks if the ComponentChangeReport row exists.
func ComponentChangeReportExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"component_change_reports\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if component_change_reports exists")
	}

	return exists, nil
}

// Exists checks if the ComponentChangeReport row exists.
func (o *ComponentChangeReport) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ComponentChangeReportExists(ctx, exec, o.ID)
}
