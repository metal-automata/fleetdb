// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testComponentChangeReports(t *testing.T) {
	t.Parallel()

	query := ComponentChangeReports()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testComponentChangeReportsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ComponentChangeReport{}
	if err = randomize.Struct(seed, o, componentChangeReportDBTypes, true, componentChangeReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentChangeReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ComponentChangeReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testComponentChangeReportsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ComponentChangeReport{}
	if err = randomize.Struct(seed, o, componentChangeReportDBTypes, true, componentChangeReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentChangeReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ComponentChangeReports().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ComponentChangeReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testComponentChangeReportsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ComponentChangeReport{}
	if err = randomize.Struct(seed, o, componentChangeReportDBTypes, true, componentChangeReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentChangeReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ComponentChangeReportSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ComponentChangeReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testComponentChangeReportsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ComponentChangeReport{}
	if err = randomize.Struct(seed, o, componentChangeReportDBTypes, true, componentChangeReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentChangeReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ComponentChangeReportExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ComponentChangeReport exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ComponentChangeReportExists to return true, but got false.")
	}
}

func testComponentChangeReportsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ComponentChangeReport{}
	if err = randomize.Struct(seed, o, componentChangeReportDBTypes, true, componentChangeReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentChangeReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	componentChangeReportFound, err := FindComponentChangeReport(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if componentChangeReportFound == nil {
		t.Error("want a record, got nil")
	}
}

func testComponentChangeReportsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ComponentChangeReport{}
	if err = randomize.Struct(seed, o, componentChangeReportDBTypes, true, componentChangeReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentChangeReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ComponentChangeReports().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testComponentChangeReportsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ComponentChangeReport{}
	if err = randomize.Struct(seed, o, componentChangeReportDBTypes, true, componentChangeReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentChangeReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ComponentChangeReports().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testComponentChangeReportsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	componentChangeReportOne := &ComponentChangeReport{}
	componentChangeReportTwo := &ComponentChangeReport{}
	if err = randomize.Struct(seed, componentChangeReportOne, componentChangeReportDBTypes, false, componentChangeReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentChangeReport struct: %s", err)
	}
	if err = randomize.Struct(seed, componentChangeReportTwo, componentChangeReportDBTypes, false, componentChangeReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentChangeReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = componentChangeReportOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = componentChangeReportTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ComponentChangeReports().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testComponentChangeReportsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	componentChangeReportOne := &ComponentChangeReport{}
	componentChangeReportTwo := &ComponentChangeReport{}
	if err = randomize.Struct(seed, componentChangeReportOne, componentChangeReportDBTypes, false, componentChangeReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentChangeReport struct: %s", err)
	}
	if err = randomize.Struct(seed, componentChangeReportTwo, componentChangeReportDBTypes, false, componentChangeReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentChangeReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = componentChangeReportOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = componentChangeReportTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ComponentChangeReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func componentChangeReportBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ComponentChangeReport) error {
	*o = ComponentChangeReport{}
	return nil
}

func componentChangeReportAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ComponentChangeReport) error {
	*o = ComponentChangeReport{}
	return nil
}

func componentChangeReportAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ComponentChangeReport) error {
	*o = ComponentChangeReport{}
	return nil
}

func componentChangeReportBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ComponentChangeReport) error {
	*o = ComponentChangeReport{}
	return nil
}

func componentChangeReportAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ComponentChangeReport) error {
	*o = ComponentChangeReport{}
	return nil
}

func componentChangeReportBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ComponentChangeReport) error {
	*o = ComponentChangeReport{}
	return nil
}

func componentChangeReportAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ComponentChangeReport) error {
	*o = ComponentChangeReport{}
	return nil
}

func componentChangeReportBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ComponentChangeReport) error {
	*o = ComponentChangeReport{}
	return nil
}

func componentChangeReportAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ComponentChangeReport) error {
	*o = ComponentChangeReport{}
	return nil
}

func testComponentChangeReportsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ComponentChangeReport{}
	o := &ComponentChangeReport{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, componentChangeReportDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ComponentChangeReport object: %s", err)
	}

	AddComponentChangeReportHook(boil.BeforeInsertHook, componentChangeReportBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	componentChangeReportBeforeInsertHooks = []ComponentChangeReportHook{}

	AddComponentChangeReportHook(boil.AfterInsertHook, componentChangeReportAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	componentChangeReportAfterInsertHooks = []ComponentChangeReportHook{}

	AddComponentChangeReportHook(boil.AfterSelectHook, componentChangeReportAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	componentChangeReportAfterSelectHooks = []ComponentChangeReportHook{}

	AddComponentChangeReportHook(boil.BeforeUpdateHook, componentChangeReportBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	componentChangeReportBeforeUpdateHooks = []ComponentChangeReportHook{}

	AddComponentChangeReportHook(boil.AfterUpdateHook, componentChangeReportAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	componentChangeReportAfterUpdateHooks = []ComponentChangeReportHook{}

	AddComponentChangeReportHook(boil.BeforeDeleteHook, componentChangeReportBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	componentChangeReportBeforeDeleteHooks = []ComponentChangeReportHook{}

	AddComponentChangeReportHook(boil.AfterDeleteHook, componentChangeReportAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	componentChangeReportAfterDeleteHooks = []ComponentChangeReportHook{}

	AddComponentChangeReportHook(boil.BeforeUpsertHook, componentChangeReportBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	componentChangeReportBeforeUpsertHooks = []ComponentChangeReportHook{}

	AddComponentChangeReportHook(boil.AfterUpsertHook, componentChangeReportAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	componentChangeReportAfterUpsertHooks = []ComponentChangeReportHook{}
}

func testComponentChangeReportsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ComponentChangeReport{}
	if err = randomize.Struct(seed, o, componentChangeReportDBTypes, true, componentChangeReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentChangeReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ComponentChangeReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testComponentChangeReportsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ComponentChangeReport{}
	if err = randomize.Struct(seed, o, componentChangeReportDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ComponentChangeReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(componentChangeReportColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ComponentChangeReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testComponentChangeReportToOneServerComponentTypeUsingServerComponentType(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ComponentChangeReport
	var foreign ServerComponentType

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, componentChangeReportDBTypes, false, componentChangeReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentChangeReport struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, serverComponentTypeDBTypes, false, serverComponentTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerComponentType struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ServerComponentTypeID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ServerComponentType().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddServerComponentTypeHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *ServerComponentType) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ComponentChangeReportSlice{&local}
	if err = local.L.LoadServerComponentType(ctx, tx, false, (*[]*ComponentChangeReport)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ServerComponentType == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ServerComponentType = nil
	if err = local.L.LoadServerComponentType(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ServerComponentType == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testComponentChangeReportToOneServerUsingServer(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ComponentChangeReport
	var foreign Server

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, componentChangeReportDBTypes, false, componentChangeReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentChangeReport struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, serverDBTypes, false, serverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Server struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ServerID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Server().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddServerHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Server) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ComponentChangeReportSlice{&local}
	if err = local.L.LoadServer(ctx, tx, false, (*[]*ComponentChangeReport)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Server == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Server = nil
	if err = local.L.LoadServer(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Server == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testComponentChangeReportToOneSetOpServerComponentTypeUsingServerComponentType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ComponentChangeReport
	var b, c ServerComponentType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, componentChangeReportDBTypes, false, strmangle.SetComplement(componentChangeReportPrimaryKeyColumns, componentChangeReportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, serverComponentTypeDBTypes, false, strmangle.SetComplement(serverComponentTypePrimaryKeyColumns, serverComponentTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serverComponentTypeDBTypes, false, strmangle.SetComplement(serverComponentTypePrimaryKeyColumns, serverComponentTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ServerComponentType{&b, &c} {
		err = a.SetServerComponentType(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ServerComponentType != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ComponentChangeReports[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ServerComponentTypeID != x.ID {
			t.Error("foreign key was wrong value", a.ServerComponentTypeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ServerComponentTypeID))
		reflect.Indirect(reflect.ValueOf(&a.ServerComponentTypeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ServerComponentTypeID != x.ID {
			t.Error("foreign key was wrong value", a.ServerComponentTypeID, x.ID)
		}
	}
}
func testComponentChangeReportToOneSetOpServerUsingServer(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ComponentChangeReport
	var b, c Server

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, componentChangeReportDBTypes, false, strmangle.SetComplement(componentChangeReportPrimaryKeyColumns, componentChangeReportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, serverDBTypes, false, strmangle.SetComplement(serverPrimaryKeyColumns, serverColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serverDBTypes, false, strmangle.SetComplement(serverPrimaryKeyColumns, serverColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Server{&b, &c} {
		err = a.SetServer(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Server != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ComponentChangeReports[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ServerID != x.ID {
			t.Error("foreign key was wrong value", a.ServerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ServerID))
		reflect.Indirect(reflect.ValueOf(&a.ServerID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ServerID != x.ID {
			t.Error("foreign key was wrong value", a.ServerID, x.ID)
		}
	}
}

func testComponentChangeReportsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ComponentChangeReport{}
	if err = randomize.Struct(seed, o, componentChangeReportDBTypes, true, componentChangeReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentChangeReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testComponentChangeReportsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ComponentChangeReport{}
	if err = randomize.Struct(seed, o, componentChangeReportDBTypes, true, componentChangeReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentChangeReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ComponentChangeReportSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testComponentChangeReportsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ComponentChangeReport{}
	if err = randomize.Struct(seed, o, componentChangeReportDBTypes, true, componentChangeReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentChangeReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ComponentChangeReports().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	componentChangeReportDBTypes = map[string]string{`ID`: `uuid`, `ReportID`: `uuid`, `ServerID`: `uuid`, `ServerComponentID`: `uuid`, `ServerComponentName`: `text`, `ServerComponentTypeID`: `uuid`, `RemoveComponent`: `boolean`, `Serial`: `text`, `CollectionMethod`: `text`, `Data`: `jsonb`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`}
	_                            = bytes.MinRead
)

func testComponentChangeReportsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(componentChangeReportPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(componentChangeReportAllColumns) == len(componentChangeReportPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ComponentChangeReport{}
	if err = randomize.Struct(seed, o, componentChangeReportDBTypes, true, componentChangeReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentChangeReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ComponentChangeReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, componentChangeReportDBTypes, true, componentChangeReportPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ComponentChangeReport struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testComponentChangeReportsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(componentChangeReportAllColumns) == len(componentChangeReportPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ComponentChangeReport{}
	if err = randomize.Struct(seed, o, componentChangeReportDBTypes, true, componentChangeReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentChangeReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ComponentChangeReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, componentChangeReportDBTypes, true, componentChangeReportPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ComponentChangeReport struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(componentChangeReportAllColumns, componentChangeReportPrimaryKeyColumns) {
		fields = componentChangeReportAllColumns
	} else {
		fields = strmangle.SetComplement(
			componentChangeReportAllColumns,
			componentChangeReportPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ComponentChangeReportSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testComponentChangeReportsUpsert(t *testing.T) {
	t.Parallel()

	if len(componentChangeReportAllColumns) == len(componentChangeReportPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ComponentChangeReport{}
	if err = randomize.Struct(seed, &o, componentChangeReportDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ComponentChangeReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ComponentChangeReport: %s", err)
	}

	count, err := ComponentChangeReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, componentChangeReportDBTypes, false, componentChangeReportPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ComponentChangeReport struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ComponentChangeReport: %s", err)
	}

	count, err = ComponentChangeReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
