// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// ComponentMetadatum is an object representing the database table.
type ComponentMetadatum struct {
	ID                string     `boil:"id" json:"id" toml:"id" yaml:"id"`
	ServerComponentID string     `boil:"server_component_id" json:"server_component_id" toml:"server_component_id" yaml:"server_component_id"`
	Namespace         string     `boil:"namespace" json:"namespace" toml:"namespace" yaml:"namespace"`
	Data              types.JSON `boil:"data" json:"data" toml:"data" yaml:"data"`
	CreatedAt         null.Time  `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt         null.Time  `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *componentMetadatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L componentMetadatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ComponentMetadatumColumns = struct {
	ID                string
	ServerComponentID string
	Namespace         string
	Data              string
	CreatedAt         string
	UpdatedAt         string
}{
	ID:                "id",
	ServerComponentID: "server_component_id",
	Namespace:         "namespace",
	Data:              "data",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
}

var ComponentMetadatumTableColumns = struct {
	ID                string
	ServerComponentID string
	Namespace         string
	Data              string
	CreatedAt         string
	UpdatedAt         string
}{
	ID:                "component_metadata.id",
	ServerComponentID: "component_metadata.server_component_id",
	Namespace:         "component_metadata.namespace",
	Data:              "component_metadata.data",
	CreatedAt:         "component_metadata.created_at",
	UpdatedAt:         "component_metadata.updated_at",
}

// Generated where

var ComponentMetadatumWhere = struct {
	ID                whereHelperstring
	ServerComponentID whereHelperstring
	Namespace         whereHelperstring
	Data              whereHelpertypes_JSON
	CreatedAt         whereHelpernull_Time
	UpdatedAt         whereHelpernull_Time
}{
	ID:                whereHelperstring{field: "\"component_metadata\".\"id\""},
	ServerComponentID: whereHelperstring{field: "\"component_metadata\".\"server_component_id\""},
	Namespace:         whereHelperstring{field: "\"component_metadata\".\"namespace\""},
	Data:              whereHelpertypes_JSON{field: "\"component_metadata\".\"data\""},
	CreatedAt:         whereHelpernull_Time{field: "\"component_metadata\".\"created_at\""},
	UpdatedAt:         whereHelpernull_Time{field: "\"component_metadata\".\"updated_at\""},
}

// ComponentMetadatumRels is where relationship names are stored.
var ComponentMetadatumRels = struct {
	ServerComponent string
}{
	ServerComponent: "ServerComponent",
}

// componentMetadatumR is where relationships are stored.
type componentMetadatumR struct {
	ServerComponent *ServerComponent `boil:"ServerComponent" json:"ServerComponent" toml:"ServerComponent" yaml:"ServerComponent"`
}

// NewStruct creates a new relationship struct
func (*componentMetadatumR) NewStruct() *componentMetadatumR {
	return &componentMetadatumR{}
}

func (r *componentMetadatumR) GetServerComponent() *ServerComponent {
	if r == nil {
		return nil
	}
	return r.ServerComponent
}

// componentMetadatumL is where Load methods for each relationship are stored.
type componentMetadatumL struct{}

var (
	componentMetadatumAllColumns            = []string{"id", "server_component_id", "namespace", "data", "created_at", "updated_at"}
	componentMetadatumColumnsWithoutDefault = []string{"server_component_id", "namespace", "data"}
	componentMetadatumColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	componentMetadatumPrimaryKeyColumns     = []string{"id"}
	componentMetadatumGeneratedColumns      = []string{}
)

type (
	// ComponentMetadatumSlice is an alias for a slice of pointers to ComponentMetadatum.
	// This should almost always be used instead of []ComponentMetadatum.
	ComponentMetadatumSlice []*ComponentMetadatum
	// ComponentMetadatumHook is the signature for custom ComponentMetadatum hook methods
	ComponentMetadatumHook func(context.Context, boil.ContextExecutor, *ComponentMetadatum) error

	componentMetadatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	componentMetadatumType                 = reflect.TypeOf(&ComponentMetadatum{})
	componentMetadatumMapping              = queries.MakeStructMapping(componentMetadatumType)
	componentMetadatumPrimaryKeyMapping, _ = queries.BindMapping(componentMetadatumType, componentMetadatumMapping, componentMetadatumPrimaryKeyColumns)
	componentMetadatumInsertCacheMut       sync.RWMutex
	componentMetadatumInsertCache          = make(map[string]insertCache)
	componentMetadatumUpdateCacheMut       sync.RWMutex
	componentMetadatumUpdateCache          = make(map[string]updateCache)
	componentMetadatumUpsertCacheMut       sync.RWMutex
	componentMetadatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var componentMetadatumAfterSelectHooks []ComponentMetadatumHook

var componentMetadatumBeforeInsertHooks []ComponentMetadatumHook
var componentMetadatumAfterInsertHooks []ComponentMetadatumHook

var componentMetadatumBeforeUpdateHooks []ComponentMetadatumHook
var componentMetadatumAfterUpdateHooks []ComponentMetadatumHook

var componentMetadatumBeforeDeleteHooks []ComponentMetadatumHook
var componentMetadatumAfterDeleteHooks []ComponentMetadatumHook

var componentMetadatumBeforeUpsertHooks []ComponentMetadatumHook
var componentMetadatumAfterUpsertHooks []ComponentMetadatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ComponentMetadatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentMetadatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ComponentMetadatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentMetadatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ComponentMetadatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentMetadatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ComponentMetadatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentMetadatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ComponentMetadatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentMetadatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ComponentMetadatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentMetadatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ComponentMetadatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentMetadatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ComponentMetadatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentMetadatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ComponentMetadatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range componentMetadatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddComponentMetadatumHook registers your hook function for all future operations.
func AddComponentMetadatumHook(hookPoint boil.HookPoint, componentMetadatumHook ComponentMetadatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		componentMetadatumAfterSelectHooks = append(componentMetadatumAfterSelectHooks, componentMetadatumHook)
	case boil.BeforeInsertHook:
		componentMetadatumBeforeInsertHooks = append(componentMetadatumBeforeInsertHooks, componentMetadatumHook)
	case boil.AfterInsertHook:
		componentMetadatumAfterInsertHooks = append(componentMetadatumAfterInsertHooks, componentMetadatumHook)
	case boil.BeforeUpdateHook:
		componentMetadatumBeforeUpdateHooks = append(componentMetadatumBeforeUpdateHooks, componentMetadatumHook)
	case boil.AfterUpdateHook:
		componentMetadatumAfterUpdateHooks = append(componentMetadatumAfterUpdateHooks, componentMetadatumHook)
	case boil.BeforeDeleteHook:
		componentMetadatumBeforeDeleteHooks = append(componentMetadatumBeforeDeleteHooks, componentMetadatumHook)
	case boil.AfterDeleteHook:
		componentMetadatumAfterDeleteHooks = append(componentMetadatumAfterDeleteHooks, componentMetadatumHook)
	case boil.BeforeUpsertHook:
		componentMetadatumBeforeUpsertHooks = append(componentMetadatumBeforeUpsertHooks, componentMetadatumHook)
	case boil.AfterUpsertHook:
		componentMetadatumAfterUpsertHooks = append(componentMetadatumAfterUpsertHooks, componentMetadatumHook)
	}
}

// One returns a single componentMetadatum record from the query.
func (q componentMetadatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ComponentMetadatum, error) {
	o := &ComponentMetadatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for component_metadata")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ComponentMetadatum records from the query.
func (q componentMetadatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (ComponentMetadatumSlice, error) {
	var o []*ComponentMetadatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ComponentMetadatum slice")
	}

	if len(componentMetadatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ComponentMetadatum records in the query.
func (q componentMetadatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count component_metadata rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q componentMetadatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if component_metadata exists")
	}

	return count > 0, nil
}

// ServerComponent pointed to by the foreign key.
func (o *ComponentMetadatum) ServerComponent(mods ...qm.QueryMod) serverComponentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ServerComponentID),
	}

	queryMods = append(queryMods, mods...)

	return ServerComponents(queryMods...)
}

// LoadServerComponent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (componentMetadatumL) LoadServerComponent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeComponentMetadatum interface{}, mods queries.Applicator) error {
	var slice []*ComponentMetadatum
	var object *ComponentMetadatum

	if singular {
		var ok bool
		object, ok = maybeComponentMetadatum.(*ComponentMetadatum)
		if !ok {
			object = new(ComponentMetadatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeComponentMetadatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeComponentMetadatum))
			}
		}
	} else {
		s, ok := maybeComponentMetadatum.(*[]*ComponentMetadatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeComponentMetadatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeComponentMetadatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &componentMetadatumR{}
		}
		args = append(args, object.ServerComponentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &componentMetadatumR{}
			}

			for _, a := range args {
				if a == obj.ServerComponentID {
					continue Outer
				}
			}

			args = append(args, obj.ServerComponentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`server_components`),
		qm.WhereIn(`server_components.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ServerComponent")
	}

	var resultSlice []*ServerComponent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ServerComponent")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for server_components")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for server_components")
	}

	if len(serverComponentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ServerComponent = foreign
		if foreign.R == nil {
			foreign.R = &serverComponentR{}
		}
		foreign.R.ComponentMetadata = append(foreign.R.ComponentMetadata, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ServerComponentID == foreign.ID {
				local.R.ServerComponent = foreign
				if foreign.R == nil {
					foreign.R = &serverComponentR{}
				}
				foreign.R.ComponentMetadata = append(foreign.R.ComponentMetadata, local)
				break
			}
		}
	}

	return nil
}

// SetServerComponent of the componentMetadatum to the related item.
// Sets o.R.ServerComponent to related.
// Adds o to related.R.ComponentMetadata.
func (o *ComponentMetadatum) SetServerComponent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServerComponent) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"component_metadata\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"server_component_id"}),
		strmangle.WhereClause("\"", "\"", 2, componentMetadatumPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ServerComponentID = related.ID
	if o.R == nil {
		o.R = &componentMetadatumR{
			ServerComponent: related,
		}
	} else {
		o.R.ServerComponent = related
	}

	if related.R == nil {
		related.R = &serverComponentR{
			ComponentMetadata: ComponentMetadatumSlice{o},
		}
	} else {
		related.R.ComponentMetadata = append(related.R.ComponentMetadata, o)
	}

	return nil
}

// ComponentMetadata retrieves all the records using an executor.
func ComponentMetadata(mods ...qm.QueryMod) componentMetadatumQuery {
	mods = append(mods, qm.From("\"component_metadata\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"component_metadata\".*"})
	}

	return componentMetadatumQuery{q}
}

// FindComponentMetadatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindComponentMetadatum(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ComponentMetadatum, error) {
	componentMetadatumObj := &ComponentMetadatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"component_metadata\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, componentMetadatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from component_metadata")
	}

	if err = componentMetadatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return componentMetadatumObj, err
	}

	return componentMetadatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ComponentMetadatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no component_metadata provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(componentMetadatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	componentMetadatumInsertCacheMut.RLock()
	cache, cached := componentMetadatumInsertCache[key]
	componentMetadatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			componentMetadatumAllColumns,
			componentMetadatumColumnsWithDefault,
			componentMetadatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(componentMetadatumType, componentMetadatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(componentMetadatumType, componentMetadatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"component_metadata\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"component_metadata\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into component_metadata")
	}

	if !cached {
		componentMetadatumInsertCacheMut.Lock()
		componentMetadatumInsertCache[key] = cache
		componentMetadatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ComponentMetadatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ComponentMetadatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	componentMetadatumUpdateCacheMut.RLock()
	cache, cached := componentMetadatumUpdateCache[key]
	componentMetadatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			componentMetadatumAllColumns,
			componentMetadatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update component_metadata, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"component_metadata\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, componentMetadatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(componentMetadatumType, componentMetadatumMapping, append(wl, componentMetadatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update component_metadata row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for component_metadata")
	}

	if !cached {
		componentMetadatumUpdateCacheMut.Lock()
		componentMetadatumUpdateCache[key] = cache
		componentMetadatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q componentMetadatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for component_metadata")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for component_metadata")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ComponentMetadatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), componentMetadatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"component_metadata\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, componentMetadatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in componentMetadatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all componentMetadatum")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ComponentMetadatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no component_metadata provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(componentMetadatumColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	componentMetadatumUpsertCacheMut.RLock()
	cache, cached := componentMetadatumUpsertCache[key]
	componentMetadatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			componentMetadatumAllColumns,
			componentMetadatumColumnsWithDefault,
			componentMetadatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			componentMetadatumAllColumns,
			componentMetadatumPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert component_metadata, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(componentMetadatumPrimaryKeyColumns))
			copy(conflict, componentMetadatumPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"component_metadata\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(componentMetadatumType, componentMetadatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(componentMetadatumType, componentMetadatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert component_metadata")
	}

	if !cached {
		componentMetadatumUpsertCacheMut.Lock()
		componentMetadatumUpsertCache[key] = cache
		componentMetadatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ComponentMetadatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ComponentMetadatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ComponentMetadatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), componentMetadatumPrimaryKeyMapping)
	sql := "DELETE FROM \"component_metadata\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from component_metadata")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for component_metadata")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q componentMetadatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no componentMetadatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from component_metadata")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for component_metadata")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ComponentMetadatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(componentMetadatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), componentMetadatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"component_metadata\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, componentMetadatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from componentMetadatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for component_metadata")
	}

	if len(componentMetadatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ComponentMetadatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindComponentMetadatum(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ComponentMetadatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ComponentMetadatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), componentMetadatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"component_metadata\".* FROM \"component_metadata\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, componentMetadatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ComponentMetadatumSlice")
	}

	*o = slice

	return nil
}

// ComponentMetadatumExists checks if the ComponentMetadatum row exists.
func ComponentMetadatumExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"component_metadata\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if component_metadata exists")
	}

	return exists, nil
}

// Exists checks if the ComponentMetadatum row exists.
func (o *ComponentMetadatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ComponentMetadatumExists(ctx, exec, o.ID)
}
