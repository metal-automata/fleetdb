// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// HardwareModel is an object representing the database table.
type HardwareModel struct {
	ID               string `boil:"id" json:"id" toml:"id" yaml:"id"`
	HardwareVendorID string `boil:"hardware_vendor_id" json:"hardware_vendor_id" toml:"hardware_vendor_id" yaml:"hardware_vendor_id"`
	Name             string `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *hardwareModelR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L hardwareModelL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var HardwareModelColumns = struct {
	ID               string
	HardwareVendorID string
	Name             string
}{
	ID:               "id",
	HardwareVendorID: "hardware_vendor_id",
	Name:             "name",
}

var HardwareModelTableColumns = struct {
	ID               string
	HardwareVendorID string
	Name             string
}{
	ID:               "hardware_models.id",
	HardwareVendorID: "hardware_models.hardware_vendor_id",
	Name:             "hardware_models.name",
}

// Generated where

var HardwareModelWhere = struct {
	ID               whereHelperstring
	HardwareVendorID whereHelperstring
	Name             whereHelperstring
}{
	ID:               whereHelperstring{field: "\"hardware_models\".\"id\""},
	HardwareVendorID: whereHelperstring{field: "\"hardware_models\".\"hardware_vendor_id\""},
	Name:             whereHelperstring{field: "\"hardware_models\".\"name\""},
}

// HardwareModelRels is where relationship names are stored.
var HardwareModelRels = struct {
	HardwareVendor string
	ServerBMCS     string
	ModelServers   string
}{
	HardwareVendor: "HardwareVendor",
	ServerBMCS:     "ServerBMCS",
	ModelServers:   "ModelServers",
}

// hardwareModelR is where relationships are stored.
type hardwareModelR struct {
	HardwareVendor *HardwareVendor `boil:"HardwareVendor" json:"HardwareVendor" toml:"HardwareVendor" yaml:"HardwareVendor"`
	ServerBMCS     ServerBMCSlice  `boil:"ServerBMCS" json:"ServerBMCS" toml:"ServerBMCS" yaml:"ServerBMCS"`
	ModelServers   ServerSlice     `boil:"ModelServers" json:"ModelServers" toml:"ModelServers" yaml:"ModelServers"`
}

// NewStruct creates a new relationship struct
func (*hardwareModelR) NewStruct() *hardwareModelR {
	return &hardwareModelR{}
}

func (r *hardwareModelR) GetHardwareVendor() *HardwareVendor {
	if r == nil {
		return nil
	}
	return r.HardwareVendor
}

func (r *hardwareModelR) GetServerBMCS() ServerBMCSlice {
	if r == nil {
		return nil
	}
	return r.ServerBMCS
}

func (r *hardwareModelR) GetModelServers() ServerSlice {
	if r == nil {
		return nil
	}
	return r.ModelServers
}

// hardwareModelL is where Load methods for each relationship are stored.
type hardwareModelL struct{}

var (
	hardwareModelAllColumns            = []string{"id", "hardware_vendor_id", "name"}
	hardwareModelColumnsWithoutDefault = []string{"hardware_vendor_id", "name"}
	hardwareModelColumnsWithDefault    = []string{"id"}
	hardwareModelPrimaryKeyColumns     = []string{"id"}
	hardwareModelGeneratedColumns      = []string{}
)

type (
	// HardwareModelSlice is an alias for a slice of pointers to HardwareModel.
	// This should almost always be used instead of []HardwareModel.
	HardwareModelSlice []*HardwareModel
	// HardwareModelHook is the signature for custom HardwareModel hook methods
	HardwareModelHook func(context.Context, boil.ContextExecutor, *HardwareModel) error

	hardwareModelQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	hardwareModelType                 = reflect.TypeOf(&HardwareModel{})
	hardwareModelMapping              = queries.MakeStructMapping(hardwareModelType)
	hardwareModelPrimaryKeyMapping, _ = queries.BindMapping(hardwareModelType, hardwareModelMapping, hardwareModelPrimaryKeyColumns)
	hardwareModelInsertCacheMut       sync.RWMutex
	hardwareModelInsertCache          = make(map[string]insertCache)
	hardwareModelUpdateCacheMut       sync.RWMutex
	hardwareModelUpdateCache          = make(map[string]updateCache)
	hardwareModelUpsertCacheMut       sync.RWMutex
	hardwareModelUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var hardwareModelAfterSelectHooks []HardwareModelHook

var hardwareModelBeforeInsertHooks []HardwareModelHook
var hardwareModelAfterInsertHooks []HardwareModelHook

var hardwareModelBeforeUpdateHooks []HardwareModelHook
var hardwareModelAfterUpdateHooks []HardwareModelHook

var hardwareModelBeforeDeleteHooks []HardwareModelHook
var hardwareModelAfterDeleteHooks []HardwareModelHook

var hardwareModelBeforeUpsertHooks []HardwareModelHook
var hardwareModelAfterUpsertHooks []HardwareModelHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *HardwareModel) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hardwareModelAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *HardwareModel) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hardwareModelBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *HardwareModel) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hardwareModelAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *HardwareModel) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hardwareModelBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *HardwareModel) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hardwareModelAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *HardwareModel) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hardwareModelBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *HardwareModel) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hardwareModelAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *HardwareModel) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hardwareModelBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *HardwareModel) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hardwareModelAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddHardwareModelHook registers your hook function for all future operations.
func AddHardwareModelHook(hookPoint boil.HookPoint, hardwareModelHook HardwareModelHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		hardwareModelAfterSelectHooks = append(hardwareModelAfterSelectHooks, hardwareModelHook)
	case boil.BeforeInsertHook:
		hardwareModelBeforeInsertHooks = append(hardwareModelBeforeInsertHooks, hardwareModelHook)
	case boil.AfterInsertHook:
		hardwareModelAfterInsertHooks = append(hardwareModelAfterInsertHooks, hardwareModelHook)
	case boil.BeforeUpdateHook:
		hardwareModelBeforeUpdateHooks = append(hardwareModelBeforeUpdateHooks, hardwareModelHook)
	case boil.AfterUpdateHook:
		hardwareModelAfterUpdateHooks = append(hardwareModelAfterUpdateHooks, hardwareModelHook)
	case boil.BeforeDeleteHook:
		hardwareModelBeforeDeleteHooks = append(hardwareModelBeforeDeleteHooks, hardwareModelHook)
	case boil.AfterDeleteHook:
		hardwareModelAfterDeleteHooks = append(hardwareModelAfterDeleteHooks, hardwareModelHook)
	case boil.BeforeUpsertHook:
		hardwareModelBeforeUpsertHooks = append(hardwareModelBeforeUpsertHooks, hardwareModelHook)
	case boil.AfterUpsertHook:
		hardwareModelAfterUpsertHooks = append(hardwareModelAfterUpsertHooks, hardwareModelHook)
	}
}

// One returns a single hardwareModel record from the query.
func (q hardwareModelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*HardwareModel, error) {
	o := &HardwareModel{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for hardware_models")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all HardwareModel records from the query.
func (q hardwareModelQuery) All(ctx context.Context, exec boil.ContextExecutor) (HardwareModelSlice, error) {
	var o []*HardwareModel

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to HardwareModel slice")
	}

	if len(hardwareModelAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all HardwareModel records in the query.
func (q hardwareModelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count hardware_models rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q hardwareModelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if hardware_models exists")
	}

	return count > 0, nil
}

// HardwareVendor pointed to by the foreign key.
func (o *HardwareModel) HardwareVendor(mods ...qm.QueryMod) hardwareVendorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.HardwareVendorID),
	}

	queryMods = append(queryMods, mods...)

	return HardwareVendors(queryMods...)
}

// ServerBMCS retrieves all the server_bmc's ServerBMCS with an executor.
func (o *HardwareModel) ServerBMCS(mods ...qm.QueryMod) serverBMCQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"server_bmcs\".\"hardware_model_id\"=?", o.ID),
	)

	return ServerBMCS(queryMods...)
}

// ModelServers retrieves all the server's Servers with an executor via model_id column.
func (o *HardwareModel) ModelServers(mods ...qm.QueryMod) serverQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"servers\".\"model_id\"=?", o.ID),
	)

	return Servers(queryMods...)
}

// LoadHardwareVendor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (hardwareModelL) LoadHardwareVendor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHardwareModel interface{}, mods queries.Applicator) error {
	var slice []*HardwareModel
	var object *HardwareModel

	if singular {
		var ok bool
		object, ok = maybeHardwareModel.(*HardwareModel)
		if !ok {
			object = new(HardwareModel)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeHardwareModel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeHardwareModel))
			}
		}
	} else {
		s, ok := maybeHardwareModel.(*[]*HardwareModel)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeHardwareModel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeHardwareModel))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &hardwareModelR{}
		}
		args = append(args, object.HardwareVendorID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hardwareModelR{}
			}

			for _, a := range args {
				if a == obj.HardwareVendorID {
					continue Outer
				}
			}

			args = append(args, obj.HardwareVendorID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`hardware_vendors`),
		qm.WhereIn(`hardware_vendors.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load HardwareVendor")
	}

	var resultSlice []*HardwareVendor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice HardwareVendor")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for hardware_vendors")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for hardware_vendors")
	}

	if len(hardwareVendorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.HardwareVendor = foreign
		if foreign.R == nil {
			foreign.R = &hardwareVendorR{}
		}
		foreign.R.HardwareModels = append(foreign.R.HardwareModels, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.HardwareVendorID == foreign.ID {
				local.R.HardwareVendor = foreign
				if foreign.R == nil {
					foreign.R = &hardwareVendorR{}
				}
				foreign.R.HardwareModels = append(foreign.R.HardwareModels, local)
				break
			}
		}
	}

	return nil
}

// LoadServerBMCS allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (hardwareModelL) LoadServerBMCS(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHardwareModel interface{}, mods queries.Applicator) error {
	var slice []*HardwareModel
	var object *HardwareModel

	if singular {
		var ok bool
		object, ok = maybeHardwareModel.(*HardwareModel)
		if !ok {
			object = new(HardwareModel)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeHardwareModel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeHardwareModel))
			}
		}
	} else {
		s, ok := maybeHardwareModel.(*[]*HardwareModel)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeHardwareModel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeHardwareModel))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &hardwareModelR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hardwareModelR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`server_bmcs`),
		qm.WhereIn(`server_bmcs.hardware_model_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load server_bmcs")
	}

	var resultSlice []*ServerBMC
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice server_bmcs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on server_bmcs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for server_bmcs")
	}

	if len(serverBMCAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ServerBMCS = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &serverBMCR{}
			}
			foreign.R.HardwareModel = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.HardwareModelID {
				local.R.ServerBMCS = append(local.R.ServerBMCS, foreign)
				if foreign.R == nil {
					foreign.R = &serverBMCR{}
				}
				foreign.R.HardwareModel = local
				break
			}
		}
	}

	return nil
}

// LoadModelServers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (hardwareModelL) LoadModelServers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHardwareModel interface{}, mods queries.Applicator) error {
	var slice []*HardwareModel
	var object *HardwareModel

	if singular {
		var ok bool
		object, ok = maybeHardwareModel.(*HardwareModel)
		if !ok {
			object = new(HardwareModel)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeHardwareModel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeHardwareModel))
			}
		}
	} else {
		s, ok := maybeHardwareModel.(*[]*HardwareModel)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeHardwareModel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeHardwareModel))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &hardwareModelR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hardwareModelR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`servers`),
		qm.WhereIn(`servers.model_id in ?`, args...),
		qmhelper.WhereIsNull(`servers.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load servers")
	}

	var resultSlice []*Server
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice servers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on servers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for servers")
	}

	if len(serverAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ModelServers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &serverR{}
			}
			foreign.R.Model = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ModelID) {
				local.R.ModelServers = append(local.R.ModelServers, foreign)
				if foreign.R == nil {
					foreign.R = &serverR{}
				}
				foreign.R.Model = local
				break
			}
		}
	}

	return nil
}

// SetHardwareVendor of the hardwareModel to the related item.
// Sets o.R.HardwareVendor to related.
// Adds o to related.R.HardwareModels.
func (o *HardwareModel) SetHardwareVendor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *HardwareVendor) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"hardware_models\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"hardware_vendor_id"}),
		strmangle.WhereClause("\"", "\"", 2, hardwareModelPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.HardwareVendorID = related.ID
	if o.R == nil {
		o.R = &hardwareModelR{
			HardwareVendor: related,
		}
	} else {
		o.R.HardwareVendor = related
	}

	if related.R == nil {
		related.R = &hardwareVendorR{
			HardwareModels: HardwareModelSlice{o},
		}
	} else {
		related.R.HardwareModels = append(related.R.HardwareModels, o)
	}

	return nil
}

// AddServerBMCS adds the given related objects to the existing relationships
// of the hardware_model, optionally inserting them as new records.
// Appends related to o.R.ServerBMCS.
// Sets related.R.HardwareModel appropriately.
func (o *HardwareModel) AddServerBMCS(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServerBMC) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.HardwareModelID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"server_bmcs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"hardware_model_id"}),
				strmangle.WhereClause("\"", "\"", 2, serverBMCPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.HardwareModelID = o.ID
		}
	}

	if o.R == nil {
		o.R = &hardwareModelR{
			ServerBMCS: related,
		}
	} else {
		o.R.ServerBMCS = append(o.R.ServerBMCS, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &serverBMCR{
				HardwareModel: o,
			}
		} else {
			rel.R.HardwareModel = o
		}
	}
	return nil
}

// AddModelServers adds the given related objects to the existing relationships
// of the hardware_model, optionally inserting them as new records.
// Appends related to o.R.ModelServers.
// Sets related.R.Model appropriately.
func (o *HardwareModel) AddModelServers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Server) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ModelID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"servers\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"model_id"}),
				strmangle.WhereClause("\"", "\"", 2, serverPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ModelID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &hardwareModelR{
			ModelServers: related,
		}
	} else {
		o.R.ModelServers = append(o.R.ModelServers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &serverR{
				Model: o,
			}
		} else {
			rel.R.Model = o
		}
	}
	return nil
}

// SetModelServers removes all previously related items of the
// hardware_model replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Model's ModelServers accordingly.
// Replaces o.R.ModelServers with related.
// Sets related.R.Model's ModelServers accordingly.
func (o *HardwareModel) SetModelServers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Server) error {
	query := "update \"servers\" set \"model_id\" = null where \"model_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ModelServers {
			queries.SetScanner(&rel.ModelID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Model = nil
		}
		o.R.ModelServers = nil
	}

	return o.AddModelServers(ctx, exec, insert, related...)
}

// RemoveModelServers relationships from objects passed in.
// Removes related items from R.ModelServers (uses pointer comparison, removal does not keep order)
// Sets related.R.Model.
func (o *HardwareModel) RemoveModelServers(ctx context.Context, exec boil.ContextExecutor, related ...*Server) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ModelID, nil)
		if rel.R != nil {
			rel.R.Model = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("model_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ModelServers {
			if rel != ri {
				continue
			}

			ln := len(o.R.ModelServers)
			if ln > 1 && i < ln-1 {
				o.R.ModelServers[i] = o.R.ModelServers[ln-1]
			}
			o.R.ModelServers = o.R.ModelServers[:ln-1]
			break
		}
	}

	return nil
}

// HardwareModels retrieves all the records using an executor.
func HardwareModels(mods ...qm.QueryMod) hardwareModelQuery {
	mods = append(mods, qm.From("\"hardware_models\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"hardware_models\".*"})
	}

	return hardwareModelQuery{q}
}

// FindHardwareModel retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindHardwareModel(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*HardwareModel, error) {
	hardwareModelObj := &HardwareModel{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"hardware_models\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, hardwareModelObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from hardware_models")
	}

	if err = hardwareModelObj.doAfterSelectHooks(ctx, exec); err != nil {
		return hardwareModelObj, err
	}

	return hardwareModelObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *HardwareModel) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no hardware_models provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(hardwareModelColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	hardwareModelInsertCacheMut.RLock()
	cache, cached := hardwareModelInsertCache[key]
	hardwareModelInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			hardwareModelAllColumns,
			hardwareModelColumnsWithDefault,
			hardwareModelColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(hardwareModelType, hardwareModelMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(hardwareModelType, hardwareModelMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"hardware_models\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"hardware_models\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into hardware_models")
	}

	if !cached {
		hardwareModelInsertCacheMut.Lock()
		hardwareModelInsertCache[key] = cache
		hardwareModelInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the HardwareModel.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *HardwareModel) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	hardwareModelUpdateCacheMut.RLock()
	cache, cached := hardwareModelUpdateCache[key]
	hardwareModelUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			hardwareModelAllColumns,
			hardwareModelPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update hardware_models, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"hardware_models\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, hardwareModelPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(hardwareModelType, hardwareModelMapping, append(wl, hardwareModelPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update hardware_models row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for hardware_models")
	}

	if !cached {
		hardwareModelUpdateCacheMut.Lock()
		hardwareModelUpdateCache[key] = cache
		hardwareModelUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q hardwareModelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for hardware_models")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for hardware_models")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o HardwareModelSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hardwareModelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"hardware_models\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, hardwareModelPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in hardwareModel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all hardwareModel")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *HardwareModel) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no hardware_models provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(hardwareModelColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	hardwareModelUpsertCacheMut.RLock()
	cache, cached := hardwareModelUpsertCache[key]
	hardwareModelUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			hardwareModelAllColumns,
			hardwareModelColumnsWithDefault,
			hardwareModelColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			hardwareModelAllColumns,
			hardwareModelPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert hardware_models, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(hardwareModelPrimaryKeyColumns))
			copy(conflict, hardwareModelPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"hardware_models\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(hardwareModelType, hardwareModelMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(hardwareModelType, hardwareModelMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert hardware_models")
	}

	if !cached {
		hardwareModelUpsertCacheMut.Lock()
		hardwareModelUpsertCache[key] = cache
		hardwareModelUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single HardwareModel record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *HardwareModel) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no HardwareModel provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), hardwareModelPrimaryKeyMapping)
	sql := "DELETE FROM \"hardware_models\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from hardware_models")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for hardware_models")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q hardwareModelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no hardwareModelQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from hardware_models")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for hardware_models")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o HardwareModelSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(hardwareModelBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hardwareModelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"hardware_models\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, hardwareModelPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from hardwareModel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for hardware_models")
	}

	if len(hardwareModelAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *HardwareModel) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindHardwareModel(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *HardwareModelSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := HardwareModelSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hardwareModelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"hardware_models\".* FROM \"hardware_models\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, hardwareModelPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in HardwareModelSlice")
	}

	*o = slice

	return nil
}

// HardwareModelExists checks if the HardwareModel row exists.
func HardwareModelExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"hardware_models\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if hardware_models exists")
	}

	return exists, nil
}

// Exists checks if the HardwareModel row exists.
func (o *HardwareModel) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return HardwareModelExists(ctx, exec, o.ID)
}
