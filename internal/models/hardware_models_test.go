// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testHardwareModels(t *testing.T) {
	t.Parallel()

	query := HardwareModels()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testHardwareModelsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HardwareModel{}
	if err = randomize.Struct(seed, o, hardwareModelDBTypes, true, hardwareModelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareModel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := HardwareModels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testHardwareModelsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HardwareModel{}
	if err = randomize.Struct(seed, o, hardwareModelDBTypes, true, hardwareModelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareModel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := HardwareModels().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := HardwareModels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testHardwareModelsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HardwareModel{}
	if err = randomize.Struct(seed, o, hardwareModelDBTypes, true, hardwareModelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareModel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := HardwareModelSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := HardwareModels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testHardwareModelsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HardwareModel{}
	if err = randomize.Struct(seed, o, hardwareModelDBTypes, true, hardwareModelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareModel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := HardwareModelExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if HardwareModel exists: %s", err)
	}
	if !e {
		t.Errorf("Expected HardwareModelExists to return true, but got false.")
	}
}

func testHardwareModelsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HardwareModel{}
	if err = randomize.Struct(seed, o, hardwareModelDBTypes, true, hardwareModelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareModel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	hardwareModelFound, err := FindHardwareModel(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if hardwareModelFound == nil {
		t.Error("want a record, got nil")
	}
}

func testHardwareModelsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HardwareModel{}
	if err = randomize.Struct(seed, o, hardwareModelDBTypes, true, hardwareModelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareModel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = HardwareModels().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testHardwareModelsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HardwareModel{}
	if err = randomize.Struct(seed, o, hardwareModelDBTypes, true, hardwareModelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareModel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := HardwareModels().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testHardwareModelsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	hardwareModelOne := &HardwareModel{}
	hardwareModelTwo := &HardwareModel{}
	if err = randomize.Struct(seed, hardwareModelOne, hardwareModelDBTypes, false, hardwareModelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareModel struct: %s", err)
	}
	if err = randomize.Struct(seed, hardwareModelTwo, hardwareModelDBTypes, false, hardwareModelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareModel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = hardwareModelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = hardwareModelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := HardwareModels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testHardwareModelsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	hardwareModelOne := &HardwareModel{}
	hardwareModelTwo := &HardwareModel{}
	if err = randomize.Struct(seed, hardwareModelOne, hardwareModelDBTypes, false, hardwareModelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareModel struct: %s", err)
	}
	if err = randomize.Struct(seed, hardwareModelTwo, hardwareModelDBTypes, false, hardwareModelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareModel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = hardwareModelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = hardwareModelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := HardwareModels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func hardwareModelBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *HardwareModel) error {
	*o = HardwareModel{}
	return nil
}

func hardwareModelAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *HardwareModel) error {
	*o = HardwareModel{}
	return nil
}

func hardwareModelAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *HardwareModel) error {
	*o = HardwareModel{}
	return nil
}

func hardwareModelBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *HardwareModel) error {
	*o = HardwareModel{}
	return nil
}

func hardwareModelAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *HardwareModel) error {
	*o = HardwareModel{}
	return nil
}

func hardwareModelBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *HardwareModel) error {
	*o = HardwareModel{}
	return nil
}

func hardwareModelAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *HardwareModel) error {
	*o = HardwareModel{}
	return nil
}

func hardwareModelBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *HardwareModel) error {
	*o = HardwareModel{}
	return nil
}

func hardwareModelAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *HardwareModel) error {
	*o = HardwareModel{}
	return nil
}

func testHardwareModelsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &HardwareModel{}
	o := &HardwareModel{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, hardwareModelDBTypes, false); err != nil {
		t.Errorf("Unable to randomize HardwareModel object: %s", err)
	}

	AddHardwareModelHook(boil.BeforeInsertHook, hardwareModelBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	hardwareModelBeforeInsertHooks = []HardwareModelHook{}

	AddHardwareModelHook(boil.AfterInsertHook, hardwareModelAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	hardwareModelAfterInsertHooks = []HardwareModelHook{}

	AddHardwareModelHook(boil.AfterSelectHook, hardwareModelAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	hardwareModelAfterSelectHooks = []HardwareModelHook{}

	AddHardwareModelHook(boil.BeforeUpdateHook, hardwareModelBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	hardwareModelBeforeUpdateHooks = []HardwareModelHook{}

	AddHardwareModelHook(boil.AfterUpdateHook, hardwareModelAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	hardwareModelAfterUpdateHooks = []HardwareModelHook{}

	AddHardwareModelHook(boil.BeforeDeleteHook, hardwareModelBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	hardwareModelBeforeDeleteHooks = []HardwareModelHook{}

	AddHardwareModelHook(boil.AfterDeleteHook, hardwareModelAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	hardwareModelAfterDeleteHooks = []HardwareModelHook{}

	AddHardwareModelHook(boil.BeforeUpsertHook, hardwareModelBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	hardwareModelBeforeUpsertHooks = []HardwareModelHook{}

	AddHardwareModelHook(boil.AfterUpsertHook, hardwareModelAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	hardwareModelAfterUpsertHooks = []HardwareModelHook{}
}

func testHardwareModelsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HardwareModel{}
	if err = randomize.Struct(seed, o, hardwareModelDBTypes, true, hardwareModelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareModel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := HardwareModels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testHardwareModelsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HardwareModel{}
	if err = randomize.Struct(seed, o, hardwareModelDBTypes, true); err != nil {
		t.Errorf("Unable to randomize HardwareModel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(hardwareModelColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := HardwareModels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testHardwareModelToManyBMCS(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a HardwareModel
	var b, c BMC

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, hardwareModelDBTypes, true, hardwareModelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareModel struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, bmcDBTypes, false, bmcColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, bmcDBTypes, false, bmcColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.HardwareModelID = a.ID
	c.HardwareModelID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.BMCS().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.HardwareModelID == b.HardwareModelID {
			bFound = true
		}
		if v.HardwareModelID == c.HardwareModelID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := HardwareModelSlice{&a}
	if err = a.L.LoadBMCS(ctx, tx, false, (*[]*HardwareModel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.BMCS); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.BMCS = nil
	if err = a.L.LoadBMCS(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.BMCS); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testHardwareModelToManyModelServers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a HardwareModel
	var b, c Server

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, hardwareModelDBTypes, true, hardwareModelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareModel struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, serverDBTypes, false, serverColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serverDBTypes, false, serverColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ModelID, a.ID)
	queries.Assign(&c.ModelID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ModelServers().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ModelID, b.ModelID) {
			bFound = true
		}
		if queries.Equal(v.ModelID, c.ModelID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := HardwareModelSlice{&a}
	if err = a.L.LoadModelServers(ctx, tx, false, (*[]*HardwareModel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ModelServers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ModelServers = nil
	if err = a.L.LoadModelServers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ModelServers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testHardwareModelToManyAddOpBMCS(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a HardwareModel
	var b, c, d, e BMC

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, hardwareModelDBTypes, false, strmangle.SetComplement(hardwareModelPrimaryKeyColumns, hardwareModelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*BMC{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, bmcDBTypes, false, strmangle.SetComplement(bmcPrimaryKeyColumns, bmcColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*BMC{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddBMCS(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.HardwareModelID {
			t.Error("foreign key was wrong value", a.ID, first.HardwareModelID)
		}
		if a.ID != second.HardwareModelID {
			t.Error("foreign key was wrong value", a.ID, second.HardwareModelID)
		}

		if first.R.HardwareModel != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.HardwareModel != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.BMCS[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.BMCS[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.BMCS().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testHardwareModelToManyAddOpModelServers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a HardwareModel
	var b, c, d, e Server

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, hardwareModelDBTypes, false, strmangle.SetComplement(hardwareModelPrimaryKeyColumns, hardwareModelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Server{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serverDBTypes, false, strmangle.SetComplement(serverPrimaryKeyColumns, serverColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Server{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddModelServers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.ModelID) {
			t.Error("foreign key was wrong value", a.ID, first.ModelID)
		}
		if !queries.Equal(a.ID, second.ModelID) {
			t.Error("foreign key was wrong value", a.ID, second.ModelID)
		}

		if first.R.Model != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Model != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ModelServers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ModelServers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ModelServers().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testHardwareModelToManySetOpModelServers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a HardwareModel
	var b, c, d, e Server

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, hardwareModelDBTypes, false, strmangle.SetComplement(hardwareModelPrimaryKeyColumns, hardwareModelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Server{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serverDBTypes, false, strmangle.SetComplement(serverPrimaryKeyColumns, serverColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetModelServers(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ModelServers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetModelServers(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ModelServers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ModelID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ModelID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.ModelID) {
		t.Error("foreign key was wrong value", a.ID, d.ModelID)
	}
	if !queries.Equal(a.ID, e.ModelID) {
		t.Error("foreign key was wrong value", a.ID, e.ModelID)
	}

	if b.R.Model != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Model != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Model != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Model != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ModelServers[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ModelServers[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testHardwareModelToManyRemoveOpModelServers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a HardwareModel
	var b, c, d, e Server

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, hardwareModelDBTypes, false, strmangle.SetComplement(hardwareModelPrimaryKeyColumns, hardwareModelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Server{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serverDBTypes, false, strmangle.SetComplement(serverPrimaryKeyColumns, serverColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddModelServers(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ModelServers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveModelServers(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ModelServers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ModelID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ModelID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Model != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Model != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Model != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Model != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ModelServers) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ModelServers[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ModelServers[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testHardwareModelToOneHardwareVendorUsingHardwareVendor(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local HardwareModel
	var foreign HardwareVendor

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, hardwareModelDBTypes, false, hardwareModelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareModel struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, hardwareVendorDBTypes, false, hardwareVendorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareVendor struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.HardwareVendorID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.HardwareVendor().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddHardwareVendorHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *HardwareVendor) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := HardwareModelSlice{&local}
	if err = local.L.LoadHardwareVendor(ctx, tx, false, (*[]*HardwareModel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.HardwareVendor == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.HardwareVendor = nil
	if err = local.L.LoadHardwareVendor(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.HardwareVendor == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testHardwareModelToOneSetOpHardwareVendorUsingHardwareVendor(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a HardwareModel
	var b, c HardwareVendor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, hardwareModelDBTypes, false, strmangle.SetComplement(hardwareModelPrimaryKeyColumns, hardwareModelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, hardwareVendorDBTypes, false, strmangle.SetComplement(hardwareVendorPrimaryKeyColumns, hardwareVendorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, hardwareVendorDBTypes, false, strmangle.SetComplement(hardwareVendorPrimaryKeyColumns, hardwareVendorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*HardwareVendor{&b, &c} {
		err = a.SetHardwareVendor(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.HardwareVendor != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.HardwareModels[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.HardwareVendorID != x.ID {
			t.Error("foreign key was wrong value", a.HardwareVendorID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.HardwareVendorID))
		reflect.Indirect(reflect.ValueOf(&a.HardwareVendorID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.HardwareVendorID != x.ID {
			t.Error("foreign key was wrong value", a.HardwareVendorID, x.ID)
		}
	}
}

func testHardwareModelsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HardwareModel{}
	if err = randomize.Struct(seed, o, hardwareModelDBTypes, true, hardwareModelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareModel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testHardwareModelsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HardwareModel{}
	if err = randomize.Struct(seed, o, hardwareModelDBTypes, true, hardwareModelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareModel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := HardwareModelSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testHardwareModelsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HardwareModel{}
	if err = randomize.Struct(seed, o, hardwareModelDBTypes, true, hardwareModelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareModel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := HardwareModels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	hardwareModelDBTypes = map[string]string{`ID`: `uuid`, `HardwareVendorID`: `uuid`, `Name`: `text`}
	_                    = bytes.MinRead
)

func testHardwareModelsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(hardwareModelPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(hardwareModelAllColumns) == len(hardwareModelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &HardwareModel{}
	if err = randomize.Struct(seed, o, hardwareModelDBTypes, true, hardwareModelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareModel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := HardwareModels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, hardwareModelDBTypes, true, hardwareModelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize HardwareModel struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testHardwareModelsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(hardwareModelAllColumns) == len(hardwareModelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &HardwareModel{}
	if err = randomize.Struct(seed, o, hardwareModelDBTypes, true, hardwareModelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareModel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := HardwareModels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, hardwareModelDBTypes, true, hardwareModelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize HardwareModel struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(hardwareModelAllColumns, hardwareModelPrimaryKeyColumns) {
		fields = hardwareModelAllColumns
	} else {
		fields = strmangle.SetComplement(
			hardwareModelAllColumns,
			hardwareModelPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := HardwareModelSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testHardwareModelsUpsert(t *testing.T) {
	t.Parallel()

	if len(hardwareModelAllColumns) == len(hardwareModelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := HardwareModel{}
	if err = randomize.Struct(seed, &o, hardwareModelDBTypes, true); err != nil {
		t.Errorf("Unable to randomize HardwareModel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert HardwareModel: %s", err)
	}

	count, err := HardwareModels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, hardwareModelDBTypes, false, hardwareModelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize HardwareModel struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert HardwareModel: %s", err)
	}

	count, err = HardwareModels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
