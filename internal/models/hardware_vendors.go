// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// HardwareVendor is an object representing the database table.
type HardwareVendor struct {
	ID   string `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name string `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *hardwareVendorR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L hardwareVendorL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var HardwareVendorColumns = struct {
	ID   string
	Name string
}{
	ID:   "id",
	Name: "name",
}

var HardwareVendorTableColumns = struct {
	ID   string
	Name string
}{
	ID:   "hardware_vendors.id",
	Name: "hardware_vendors.name",
}

// Generated where

var HardwareVendorWhere = struct {
	ID   whereHelperstring
	Name whereHelperstring
}{
	ID:   whereHelperstring{field: "\"hardware_vendors\".\"id\""},
	Name: whereHelperstring{field: "\"hardware_vendors\".\"name\""},
}

// HardwareVendorRels is where relationship names are stored.
var HardwareVendorRels = struct {
	HardwareModels string
	ServerBMCS     string
	VendorServers  string
}{
	HardwareModels: "HardwareModels",
	ServerBMCS:     "ServerBMCS",
	VendorServers:  "VendorServers",
}

// hardwareVendorR is where relationships are stored.
type hardwareVendorR struct {
	HardwareModels HardwareModelSlice `boil:"HardwareModels" json:"HardwareModels" toml:"HardwareModels" yaml:"HardwareModels"`
	ServerBMCS     ServerBMCSlice     `boil:"ServerBMCS" json:"ServerBMCS" toml:"ServerBMCS" yaml:"ServerBMCS"`
	VendorServers  ServerSlice        `boil:"VendorServers" json:"VendorServers" toml:"VendorServers" yaml:"VendorServers"`
}

// NewStruct creates a new relationship struct
func (*hardwareVendorR) NewStruct() *hardwareVendorR {
	return &hardwareVendorR{}
}

func (r *hardwareVendorR) GetHardwareModels() HardwareModelSlice {
	if r == nil {
		return nil
	}
	return r.HardwareModels
}

func (r *hardwareVendorR) GetServerBMCS() ServerBMCSlice {
	if r == nil {
		return nil
	}
	return r.ServerBMCS
}

func (r *hardwareVendorR) GetVendorServers() ServerSlice {
	if r == nil {
		return nil
	}
	return r.VendorServers
}

// hardwareVendorL is where Load methods for each relationship are stored.
type hardwareVendorL struct{}

var (
	hardwareVendorAllColumns            = []string{"id", "name"}
	hardwareVendorColumnsWithoutDefault = []string{"name"}
	hardwareVendorColumnsWithDefault    = []string{"id"}
	hardwareVendorPrimaryKeyColumns     = []string{"id"}
	hardwareVendorGeneratedColumns      = []string{}
)

type (
	// HardwareVendorSlice is an alias for a slice of pointers to HardwareVendor.
	// This should almost always be used instead of []HardwareVendor.
	HardwareVendorSlice []*HardwareVendor
	// HardwareVendorHook is the signature for custom HardwareVendor hook methods
	HardwareVendorHook func(context.Context, boil.ContextExecutor, *HardwareVendor) error

	hardwareVendorQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	hardwareVendorType                 = reflect.TypeOf(&HardwareVendor{})
	hardwareVendorMapping              = queries.MakeStructMapping(hardwareVendorType)
	hardwareVendorPrimaryKeyMapping, _ = queries.BindMapping(hardwareVendorType, hardwareVendorMapping, hardwareVendorPrimaryKeyColumns)
	hardwareVendorInsertCacheMut       sync.RWMutex
	hardwareVendorInsertCache          = make(map[string]insertCache)
	hardwareVendorUpdateCacheMut       sync.RWMutex
	hardwareVendorUpdateCache          = make(map[string]updateCache)
	hardwareVendorUpsertCacheMut       sync.RWMutex
	hardwareVendorUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var hardwareVendorAfterSelectHooks []HardwareVendorHook

var hardwareVendorBeforeInsertHooks []HardwareVendorHook
var hardwareVendorAfterInsertHooks []HardwareVendorHook

var hardwareVendorBeforeUpdateHooks []HardwareVendorHook
var hardwareVendorAfterUpdateHooks []HardwareVendorHook

var hardwareVendorBeforeDeleteHooks []HardwareVendorHook
var hardwareVendorAfterDeleteHooks []HardwareVendorHook

var hardwareVendorBeforeUpsertHooks []HardwareVendorHook
var hardwareVendorAfterUpsertHooks []HardwareVendorHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *HardwareVendor) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hardwareVendorAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *HardwareVendor) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hardwareVendorBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *HardwareVendor) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hardwareVendorAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *HardwareVendor) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hardwareVendorBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *HardwareVendor) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hardwareVendorAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *HardwareVendor) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hardwareVendorBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *HardwareVendor) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hardwareVendorAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *HardwareVendor) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hardwareVendorBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *HardwareVendor) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hardwareVendorAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddHardwareVendorHook registers your hook function for all future operations.
func AddHardwareVendorHook(hookPoint boil.HookPoint, hardwareVendorHook HardwareVendorHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		hardwareVendorAfterSelectHooks = append(hardwareVendorAfterSelectHooks, hardwareVendorHook)
	case boil.BeforeInsertHook:
		hardwareVendorBeforeInsertHooks = append(hardwareVendorBeforeInsertHooks, hardwareVendorHook)
	case boil.AfterInsertHook:
		hardwareVendorAfterInsertHooks = append(hardwareVendorAfterInsertHooks, hardwareVendorHook)
	case boil.BeforeUpdateHook:
		hardwareVendorBeforeUpdateHooks = append(hardwareVendorBeforeUpdateHooks, hardwareVendorHook)
	case boil.AfterUpdateHook:
		hardwareVendorAfterUpdateHooks = append(hardwareVendorAfterUpdateHooks, hardwareVendorHook)
	case boil.BeforeDeleteHook:
		hardwareVendorBeforeDeleteHooks = append(hardwareVendorBeforeDeleteHooks, hardwareVendorHook)
	case boil.AfterDeleteHook:
		hardwareVendorAfterDeleteHooks = append(hardwareVendorAfterDeleteHooks, hardwareVendorHook)
	case boil.BeforeUpsertHook:
		hardwareVendorBeforeUpsertHooks = append(hardwareVendorBeforeUpsertHooks, hardwareVendorHook)
	case boil.AfterUpsertHook:
		hardwareVendorAfterUpsertHooks = append(hardwareVendorAfterUpsertHooks, hardwareVendorHook)
	}
}

// One returns a single hardwareVendor record from the query.
func (q hardwareVendorQuery) One(ctx context.Context, exec boil.ContextExecutor) (*HardwareVendor, error) {
	o := &HardwareVendor{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for hardware_vendors")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all HardwareVendor records from the query.
func (q hardwareVendorQuery) All(ctx context.Context, exec boil.ContextExecutor) (HardwareVendorSlice, error) {
	var o []*HardwareVendor

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to HardwareVendor slice")
	}

	if len(hardwareVendorAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all HardwareVendor records in the query.
func (q hardwareVendorQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count hardware_vendors rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q hardwareVendorQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if hardware_vendors exists")
	}

	return count > 0, nil
}

// HardwareModels retrieves all the hardware_model's HardwareModels with an executor.
func (o *HardwareVendor) HardwareModels(mods ...qm.QueryMod) hardwareModelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"hardware_models\".\"hardware_vendor_id\"=?", o.ID),
	)

	return HardwareModels(queryMods...)
}

// ServerBMCS retrieves all the server_bmc's ServerBMCS with an executor.
func (o *HardwareVendor) ServerBMCS(mods ...qm.QueryMod) serverBMCQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"server_bmcs\".\"hardware_vendor_id\"=?", o.ID),
	)

	return ServerBMCS(queryMods...)
}

// VendorServers retrieves all the server's Servers with an executor via vendor_id column.
func (o *HardwareVendor) VendorServers(mods ...qm.QueryMod) serverQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"servers\".\"vendor_id\"=?", o.ID),
	)

	return Servers(queryMods...)
}

// LoadHardwareModels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (hardwareVendorL) LoadHardwareModels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHardwareVendor interface{}, mods queries.Applicator) error {
	var slice []*HardwareVendor
	var object *HardwareVendor

	if singular {
		var ok bool
		object, ok = maybeHardwareVendor.(*HardwareVendor)
		if !ok {
			object = new(HardwareVendor)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeHardwareVendor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeHardwareVendor))
			}
		}
	} else {
		s, ok := maybeHardwareVendor.(*[]*HardwareVendor)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeHardwareVendor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeHardwareVendor))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &hardwareVendorR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hardwareVendorR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`hardware_models`),
		qm.WhereIn(`hardware_models.hardware_vendor_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load hardware_models")
	}

	var resultSlice []*HardwareModel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice hardware_models")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on hardware_models")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for hardware_models")
	}

	if len(hardwareModelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.HardwareModels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &hardwareModelR{}
			}
			foreign.R.HardwareVendor = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.HardwareVendorID {
				local.R.HardwareModels = append(local.R.HardwareModels, foreign)
				if foreign.R == nil {
					foreign.R = &hardwareModelR{}
				}
				foreign.R.HardwareVendor = local
				break
			}
		}
	}

	return nil
}

// LoadServerBMCS allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (hardwareVendorL) LoadServerBMCS(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHardwareVendor interface{}, mods queries.Applicator) error {
	var slice []*HardwareVendor
	var object *HardwareVendor

	if singular {
		var ok bool
		object, ok = maybeHardwareVendor.(*HardwareVendor)
		if !ok {
			object = new(HardwareVendor)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeHardwareVendor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeHardwareVendor))
			}
		}
	} else {
		s, ok := maybeHardwareVendor.(*[]*HardwareVendor)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeHardwareVendor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeHardwareVendor))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &hardwareVendorR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hardwareVendorR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`server_bmcs`),
		qm.WhereIn(`server_bmcs.hardware_vendor_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load server_bmcs")
	}

	var resultSlice []*ServerBMC
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice server_bmcs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on server_bmcs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for server_bmcs")
	}

	if len(serverBMCAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ServerBMCS = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &serverBMCR{}
			}
			foreign.R.HardwareVendor = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.HardwareVendorID {
				local.R.ServerBMCS = append(local.R.ServerBMCS, foreign)
				if foreign.R == nil {
					foreign.R = &serverBMCR{}
				}
				foreign.R.HardwareVendor = local
				break
			}
		}
	}

	return nil
}

// LoadVendorServers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (hardwareVendorL) LoadVendorServers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHardwareVendor interface{}, mods queries.Applicator) error {
	var slice []*HardwareVendor
	var object *HardwareVendor

	if singular {
		var ok bool
		object, ok = maybeHardwareVendor.(*HardwareVendor)
		if !ok {
			object = new(HardwareVendor)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeHardwareVendor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeHardwareVendor))
			}
		}
	} else {
		s, ok := maybeHardwareVendor.(*[]*HardwareVendor)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeHardwareVendor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeHardwareVendor))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &hardwareVendorR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hardwareVendorR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`servers`),
		qm.WhereIn(`servers.vendor_id in ?`, args...),
		qmhelper.WhereIsNull(`servers.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load servers")
	}

	var resultSlice []*Server
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice servers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on servers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for servers")
	}

	if len(serverAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VendorServers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &serverR{}
			}
			foreign.R.Vendor = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.VendorID) {
				local.R.VendorServers = append(local.R.VendorServers, foreign)
				if foreign.R == nil {
					foreign.R = &serverR{}
				}
				foreign.R.Vendor = local
				break
			}
		}
	}

	return nil
}

// AddHardwareModels adds the given related objects to the existing relationships
// of the hardware_vendor, optionally inserting them as new records.
// Appends related to o.R.HardwareModels.
// Sets related.R.HardwareVendor appropriately.
func (o *HardwareVendor) AddHardwareModels(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*HardwareModel) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.HardwareVendorID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"hardware_models\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"hardware_vendor_id"}),
				strmangle.WhereClause("\"", "\"", 2, hardwareModelPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.HardwareVendorID = o.ID
		}
	}

	if o.R == nil {
		o.R = &hardwareVendorR{
			HardwareModels: related,
		}
	} else {
		o.R.HardwareModels = append(o.R.HardwareModels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &hardwareModelR{
				HardwareVendor: o,
			}
		} else {
			rel.R.HardwareVendor = o
		}
	}
	return nil
}

// AddServerBMCS adds the given related objects to the existing relationships
// of the hardware_vendor, optionally inserting them as new records.
// Appends related to o.R.ServerBMCS.
// Sets related.R.HardwareVendor appropriately.
func (o *HardwareVendor) AddServerBMCS(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServerBMC) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.HardwareVendorID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"server_bmcs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"hardware_vendor_id"}),
				strmangle.WhereClause("\"", "\"", 2, serverBMCPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.HardwareVendorID = o.ID
		}
	}

	if o.R == nil {
		o.R = &hardwareVendorR{
			ServerBMCS: related,
		}
	} else {
		o.R.ServerBMCS = append(o.R.ServerBMCS, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &serverBMCR{
				HardwareVendor: o,
			}
		} else {
			rel.R.HardwareVendor = o
		}
	}
	return nil
}

// AddVendorServers adds the given related objects to the existing relationships
// of the hardware_vendor, optionally inserting them as new records.
// Appends related to o.R.VendorServers.
// Sets related.R.Vendor appropriately.
func (o *HardwareVendor) AddVendorServers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Server) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.VendorID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"servers\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"vendor_id"}),
				strmangle.WhereClause("\"", "\"", 2, serverPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.VendorID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &hardwareVendorR{
			VendorServers: related,
		}
	} else {
		o.R.VendorServers = append(o.R.VendorServers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &serverR{
				Vendor: o,
			}
		} else {
			rel.R.Vendor = o
		}
	}
	return nil
}

// SetVendorServers removes all previously related items of the
// hardware_vendor replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Vendor's VendorServers accordingly.
// Replaces o.R.VendorServers with related.
// Sets related.R.Vendor's VendorServers accordingly.
func (o *HardwareVendor) SetVendorServers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Server) error {
	query := "update \"servers\" set \"vendor_id\" = null where \"vendor_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.VendorServers {
			queries.SetScanner(&rel.VendorID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Vendor = nil
		}
		o.R.VendorServers = nil
	}

	return o.AddVendorServers(ctx, exec, insert, related...)
}

// RemoveVendorServers relationships from objects passed in.
// Removes related items from R.VendorServers (uses pointer comparison, removal does not keep order)
// Sets related.R.Vendor.
func (o *HardwareVendor) RemoveVendorServers(ctx context.Context, exec boil.ContextExecutor, related ...*Server) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.VendorID, nil)
		if rel.R != nil {
			rel.R.Vendor = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("vendor_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.VendorServers {
			if rel != ri {
				continue
			}

			ln := len(o.R.VendorServers)
			if ln > 1 && i < ln-1 {
				o.R.VendorServers[i] = o.R.VendorServers[ln-1]
			}
			o.R.VendorServers = o.R.VendorServers[:ln-1]
			break
		}
	}

	return nil
}

// HardwareVendors retrieves all the records using an executor.
func HardwareVendors(mods ...qm.QueryMod) hardwareVendorQuery {
	mods = append(mods, qm.From("\"hardware_vendors\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"hardware_vendors\".*"})
	}

	return hardwareVendorQuery{q}
}

// FindHardwareVendor retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindHardwareVendor(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*HardwareVendor, error) {
	hardwareVendorObj := &HardwareVendor{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"hardware_vendors\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, hardwareVendorObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from hardware_vendors")
	}

	if err = hardwareVendorObj.doAfterSelectHooks(ctx, exec); err != nil {
		return hardwareVendorObj, err
	}

	return hardwareVendorObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *HardwareVendor) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no hardware_vendors provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(hardwareVendorColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	hardwareVendorInsertCacheMut.RLock()
	cache, cached := hardwareVendorInsertCache[key]
	hardwareVendorInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			hardwareVendorAllColumns,
			hardwareVendorColumnsWithDefault,
			hardwareVendorColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(hardwareVendorType, hardwareVendorMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(hardwareVendorType, hardwareVendorMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"hardware_vendors\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"hardware_vendors\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into hardware_vendors")
	}

	if !cached {
		hardwareVendorInsertCacheMut.Lock()
		hardwareVendorInsertCache[key] = cache
		hardwareVendorInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the HardwareVendor.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *HardwareVendor) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	hardwareVendorUpdateCacheMut.RLock()
	cache, cached := hardwareVendorUpdateCache[key]
	hardwareVendorUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			hardwareVendorAllColumns,
			hardwareVendorPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update hardware_vendors, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"hardware_vendors\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, hardwareVendorPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(hardwareVendorType, hardwareVendorMapping, append(wl, hardwareVendorPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update hardware_vendors row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for hardware_vendors")
	}

	if !cached {
		hardwareVendorUpdateCacheMut.Lock()
		hardwareVendorUpdateCache[key] = cache
		hardwareVendorUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q hardwareVendorQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for hardware_vendors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for hardware_vendors")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o HardwareVendorSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hardwareVendorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"hardware_vendors\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, hardwareVendorPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in hardwareVendor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all hardwareVendor")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *HardwareVendor) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no hardware_vendors provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(hardwareVendorColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	hardwareVendorUpsertCacheMut.RLock()
	cache, cached := hardwareVendorUpsertCache[key]
	hardwareVendorUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			hardwareVendorAllColumns,
			hardwareVendorColumnsWithDefault,
			hardwareVendorColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			hardwareVendorAllColumns,
			hardwareVendorPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert hardware_vendors, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(hardwareVendorPrimaryKeyColumns))
			copy(conflict, hardwareVendorPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"hardware_vendors\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(hardwareVendorType, hardwareVendorMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(hardwareVendorType, hardwareVendorMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert hardware_vendors")
	}

	if !cached {
		hardwareVendorUpsertCacheMut.Lock()
		hardwareVendorUpsertCache[key] = cache
		hardwareVendorUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single HardwareVendor record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *HardwareVendor) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no HardwareVendor provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), hardwareVendorPrimaryKeyMapping)
	sql := "DELETE FROM \"hardware_vendors\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from hardware_vendors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for hardware_vendors")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q hardwareVendorQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no hardwareVendorQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from hardware_vendors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for hardware_vendors")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o HardwareVendorSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(hardwareVendorBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hardwareVendorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"hardware_vendors\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, hardwareVendorPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from hardwareVendor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for hardware_vendors")
	}

	if len(hardwareVendorAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *HardwareVendor) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindHardwareVendor(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *HardwareVendorSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := HardwareVendorSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hardwareVendorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"hardware_vendors\".* FROM \"hardware_vendors\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, hardwareVendorPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in HardwareVendorSlice")
	}

	*o = slice

	return nil
}

// HardwareVendorExists checks if the HardwareVendor row exists.
func HardwareVendorExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"hardware_vendors\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if hardware_vendors exists")
	}

	return exists, nil
}

// Exists checks if the HardwareVendor row exists.
func (o *HardwareVendor) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return HardwareVendorExists(ctx, exec, o.ID)
}
