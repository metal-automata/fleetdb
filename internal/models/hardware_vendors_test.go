// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testHardwareVendors(t *testing.T) {
	t.Parallel()

	query := HardwareVendors()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testHardwareVendorsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HardwareVendor{}
	if err = randomize.Struct(seed, o, hardwareVendorDBTypes, true, hardwareVendorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareVendor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := HardwareVendors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testHardwareVendorsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HardwareVendor{}
	if err = randomize.Struct(seed, o, hardwareVendorDBTypes, true, hardwareVendorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareVendor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := HardwareVendors().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := HardwareVendors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testHardwareVendorsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HardwareVendor{}
	if err = randomize.Struct(seed, o, hardwareVendorDBTypes, true, hardwareVendorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareVendor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := HardwareVendorSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := HardwareVendors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testHardwareVendorsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HardwareVendor{}
	if err = randomize.Struct(seed, o, hardwareVendorDBTypes, true, hardwareVendorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareVendor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := HardwareVendorExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if HardwareVendor exists: %s", err)
	}
	if !e {
		t.Errorf("Expected HardwareVendorExists to return true, but got false.")
	}
}

func testHardwareVendorsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HardwareVendor{}
	if err = randomize.Struct(seed, o, hardwareVendorDBTypes, true, hardwareVendorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareVendor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	hardwareVendorFound, err := FindHardwareVendor(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if hardwareVendorFound == nil {
		t.Error("want a record, got nil")
	}
}

func testHardwareVendorsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HardwareVendor{}
	if err = randomize.Struct(seed, o, hardwareVendorDBTypes, true, hardwareVendorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareVendor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = HardwareVendors().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testHardwareVendorsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HardwareVendor{}
	if err = randomize.Struct(seed, o, hardwareVendorDBTypes, true, hardwareVendorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareVendor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := HardwareVendors().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testHardwareVendorsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	hardwareVendorOne := &HardwareVendor{}
	hardwareVendorTwo := &HardwareVendor{}
	if err = randomize.Struct(seed, hardwareVendorOne, hardwareVendorDBTypes, false, hardwareVendorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareVendor struct: %s", err)
	}
	if err = randomize.Struct(seed, hardwareVendorTwo, hardwareVendorDBTypes, false, hardwareVendorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareVendor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = hardwareVendorOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = hardwareVendorTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := HardwareVendors().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testHardwareVendorsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	hardwareVendorOne := &HardwareVendor{}
	hardwareVendorTwo := &HardwareVendor{}
	if err = randomize.Struct(seed, hardwareVendorOne, hardwareVendorDBTypes, false, hardwareVendorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareVendor struct: %s", err)
	}
	if err = randomize.Struct(seed, hardwareVendorTwo, hardwareVendorDBTypes, false, hardwareVendorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareVendor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = hardwareVendorOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = hardwareVendorTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := HardwareVendors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func hardwareVendorBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *HardwareVendor) error {
	*o = HardwareVendor{}
	return nil
}

func hardwareVendorAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *HardwareVendor) error {
	*o = HardwareVendor{}
	return nil
}

func hardwareVendorAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *HardwareVendor) error {
	*o = HardwareVendor{}
	return nil
}

func hardwareVendorBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *HardwareVendor) error {
	*o = HardwareVendor{}
	return nil
}

func hardwareVendorAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *HardwareVendor) error {
	*o = HardwareVendor{}
	return nil
}

func hardwareVendorBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *HardwareVendor) error {
	*o = HardwareVendor{}
	return nil
}

func hardwareVendorAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *HardwareVendor) error {
	*o = HardwareVendor{}
	return nil
}

func hardwareVendorBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *HardwareVendor) error {
	*o = HardwareVendor{}
	return nil
}

func hardwareVendorAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *HardwareVendor) error {
	*o = HardwareVendor{}
	return nil
}

func testHardwareVendorsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &HardwareVendor{}
	o := &HardwareVendor{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, hardwareVendorDBTypes, false); err != nil {
		t.Errorf("Unable to randomize HardwareVendor object: %s", err)
	}

	AddHardwareVendorHook(boil.BeforeInsertHook, hardwareVendorBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	hardwareVendorBeforeInsertHooks = []HardwareVendorHook{}

	AddHardwareVendorHook(boil.AfterInsertHook, hardwareVendorAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	hardwareVendorAfterInsertHooks = []HardwareVendorHook{}

	AddHardwareVendorHook(boil.AfterSelectHook, hardwareVendorAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	hardwareVendorAfterSelectHooks = []HardwareVendorHook{}

	AddHardwareVendorHook(boil.BeforeUpdateHook, hardwareVendorBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	hardwareVendorBeforeUpdateHooks = []HardwareVendorHook{}

	AddHardwareVendorHook(boil.AfterUpdateHook, hardwareVendorAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	hardwareVendorAfterUpdateHooks = []HardwareVendorHook{}

	AddHardwareVendorHook(boil.BeforeDeleteHook, hardwareVendorBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	hardwareVendorBeforeDeleteHooks = []HardwareVendorHook{}

	AddHardwareVendorHook(boil.AfterDeleteHook, hardwareVendorAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	hardwareVendorAfterDeleteHooks = []HardwareVendorHook{}

	AddHardwareVendorHook(boil.BeforeUpsertHook, hardwareVendorBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	hardwareVendorBeforeUpsertHooks = []HardwareVendorHook{}

	AddHardwareVendorHook(boil.AfterUpsertHook, hardwareVendorAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	hardwareVendorAfterUpsertHooks = []HardwareVendorHook{}
}

func testHardwareVendorsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HardwareVendor{}
	if err = randomize.Struct(seed, o, hardwareVendorDBTypes, true, hardwareVendorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareVendor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := HardwareVendors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testHardwareVendorsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HardwareVendor{}
	if err = randomize.Struct(seed, o, hardwareVendorDBTypes, true); err != nil {
		t.Errorf("Unable to randomize HardwareVendor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(hardwareVendorColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := HardwareVendors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testHardwareVendorToManyHardwareModels(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a HardwareVendor
	var b, c HardwareModel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, hardwareVendorDBTypes, true, hardwareVendorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareVendor struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, hardwareModelDBTypes, false, hardwareModelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, hardwareModelDBTypes, false, hardwareModelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.HardwareVendorID = a.ID
	c.HardwareVendorID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.HardwareModels().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.HardwareVendorID == b.HardwareVendorID {
			bFound = true
		}
		if v.HardwareVendorID == c.HardwareVendorID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := HardwareVendorSlice{&a}
	if err = a.L.LoadHardwareModels(ctx, tx, false, (*[]*HardwareVendor)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.HardwareModels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.HardwareModels = nil
	if err = a.L.LoadHardwareModels(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.HardwareModels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testHardwareVendorToManyServerBMCS(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a HardwareVendor
	var b, c ServerBMC

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, hardwareVendorDBTypes, true, hardwareVendorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareVendor struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, serverBMCDBTypes, false, serverBMCColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serverBMCDBTypes, false, serverBMCColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.HardwareVendorID = a.ID
	c.HardwareVendorID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ServerBMCS().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.HardwareVendorID == b.HardwareVendorID {
			bFound = true
		}
		if v.HardwareVendorID == c.HardwareVendorID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := HardwareVendorSlice{&a}
	if err = a.L.LoadServerBMCS(ctx, tx, false, (*[]*HardwareVendor)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ServerBMCS); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ServerBMCS = nil
	if err = a.L.LoadServerBMCS(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ServerBMCS); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testHardwareVendorToManyVendorServers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a HardwareVendor
	var b, c Server

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, hardwareVendorDBTypes, true, hardwareVendorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareVendor struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, serverDBTypes, false, serverColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serverDBTypes, false, serverColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.VendorID, a.ID)
	queries.Assign(&c.VendorID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.VendorServers().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.VendorID, b.VendorID) {
			bFound = true
		}
		if queries.Equal(v.VendorID, c.VendorID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := HardwareVendorSlice{&a}
	if err = a.L.LoadVendorServers(ctx, tx, false, (*[]*HardwareVendor)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VendorServers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.VendorServers = nil
	if err = a.L.LoadVendorServers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VendorServers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testHardwareVendorToManyAddOpHardwareModels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a HardwareVendor
	var b, c, d, e HardwareModel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, hardwareVendorDBTypes, false, strmangle.SetComplement(hardwareVendorPrimaryKeyColumns, hardwareVendorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*HardwareModel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, hardwareModelDBTypes, false, strmangle.SetComplement(hardwareModelPrimaryKeyColumns, hardwareModelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*HardwareModel{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddHardwareModels(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.HardwareVendorID {
			t.Error("foreign key was wrong value", a.ID, first.HardwareVendorID)
		}
		if a.ID != second.HardwareVendorID {
			t.Error("foreign key was wrong value", a.ID, second.HardwareVendorID)
		}

		if first.R.HardwareVendor != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.HardwareVendor != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.HardwareModels[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.HardwareModels[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.HardwareModels().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testHardwareVendorToManyAddOpServerBMCS(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a HardwareVendor
	var b, c, d, e ServerBMC

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, hardwareVendorDBTypes, false, strmangle.SetComplement(hardwareVendorPrimaryKeyColumns, hardwareVendorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServerBMC{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serverBMCDBTypes, false, strmangle.SetComplement(serverBMCPrimaryKeyColumns, serverBMCColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ServerBMC{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddServerBMCS(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.HardwareVendorID {
			t.Error("foreign key was wrong value", a.ID, first.HardwareVendorID)
		}
		if a.ID != second.HardwareVendorID {
			t.Error("foreign key was wrong value", a.ID, second.HardwareVendorID)
		}

		if first.R.HardwareVendor != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.HardwareVendor != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ServerBMCS[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ServerBMCS[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ServerBMCS().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testHardwareVendorToManyAddOpVendorServers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a HardwareVendor
	var b, c, d, e Server

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, hardwareVendorDBTypes, false, strmangle.SetComplement(hardwareVendorPrimaryKeyColumns, hardwareVendorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Server{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serverDBTypes, false, strmangle.SetComplement(serverPrimaryKeyColumns, serverColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Server{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddVendorServers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.VendorID) {
			t.Error("foreign key was wrong value", a.ID, first.VendorID)
		}
		if !queries.Equal(a.ID, second.VendorID) {
			t.Error("foreign key was wrong value", a.ID, second.VendorID)
		}

		if first.R.Vendor != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Vendor != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.VendorServers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.VendorServers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.VendorServers().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testHardwareVendorToManySetOpVendorServers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a HardwareVendor
	var b, c, d, e Server

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, hardwareVendorDBTypes, false, strmangle.SetComplement(hardwareVendorPrimaryKeyColumns, hardwareVendorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Server{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serverDBTypes, false, strmangle.SetComplement(serverPrimaryKeyColumns, serverColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetVendorServers(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.VendorServers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetVendorServers(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.VendorServers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.VendorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.VendorID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.VendorID) {
		t.Error("foreign key was wrong value", a.ID, d.VendorID)
	}
	if !queries.Equal(a.ID, e.VendorID) {
		t.Error("foreign key was wrong value", a.ID, e.VendorID)
	}

	if b.R.Vendor != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Vendor != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Vendor != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Vendor != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.VendorServers[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.VendorServers[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testHardwareVendorToManyRemoveOpVendorServers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a HardwareVendor
	var b, c, d, e Server

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, hardwareVendorDBTypes, false, strmangle.SetComplement(hardwareVendorPrimaryKeyColumns, hardwareVendorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Server{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serverDBTypes, false, strmangle.SetComplement(serverPrimaryKeyColumns, serverColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddVendorServers(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.VendorServers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveVendorServers(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.VendorServers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.VendorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.VendorID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Vendor != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Vendor != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Vendor != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Vendor != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.VendorServers) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.VendorServers[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.VendorServers[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testHardwareVendorsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HardwareVendor{}
	if err = randomize.Struct(seed, o, hardwareVendorDBTypes, true, hardwareVendorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareVendor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testHardwareVendorsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HardwareVendor{}
	if err = randomize.Struct(seed, o, hardwareVendorDBTypes, true, hardwareVendorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareVendor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := HardwareVendorSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testHardwareVendorsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &HardwareVendor{}
	if err = randomize.Struct(seed, o, hardwareVendorDBTypes, true, hardwareVendorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareVendor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := HardwareVendors().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	hardwareVendorDBTypes = map[string]string{`ID`: `uuid`, `Name`: `text`}
	_                     = bytes.MinRead
)

func testHardwareVendorsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(hardwareVendorPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(hardwareVendorAllColumns) == len(hardwareVendorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &HardwareVendor{}
	if err = randomize.Struct(seed, o, hardwareVendorDBTypes, true, hardwareVendorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareVendor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := HardwareVendors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, hardwareVendorDBTypes, true, hardwareVendorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize HardwareVendor struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testHardwareVendorsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(hardwareVendorAllColumns) == len(hardwareVendorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &HardwareVendor{}
	if err = randomize.Struct(seed, o, hardwareVendorDBTypes, true, hardwareVendorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareVendor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := HardwareVendors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, hardwareVendorDBTypes, true, hardwareVendorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize HardwareVendor struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(hardwareVendorAllColumns, hardwareVendorPrimaryKeyColumns) {
		fields = hardwareVendorAllColumns
	} else {
		fields = strmangle.SetComplement(
			hardwareVendorAllColumns,
			hardwareVendorPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := HardwareVendorSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testHardwareVendorsUpsert(t *testing.T) {
	t.Parallel()

	if len(hardwareVendorAllColumns) == len(hardwareVendorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := HardwareVendor{}
	if err = randomize.Struct(seed, &o, hardwareVendorDBTypes, true); err != nil {
		t.Errorf("Unable to randomize HardwareVendor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert HardwareVendor: %s", err)
	}

	count, err := HardwareVendors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, hardwareVendorDBTypes, false, hardwareVendorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize HardwareVendor struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert HardwareVendor: %s", err)
	}

	count, err = HardwareVendors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
