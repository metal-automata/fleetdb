// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// InstalledFirmware is an object representing the database table.
type InstalledFirmware struct {
	ID                string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	ServerComponentID string    `boil:"server_component_id" json:"server_component_id" toml:"server_component_id" yaml:"server_component_id"`
	Version           string    `boil:"version" json:"version" toml:"version" yaml:"version"`
	CreatedAt         null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt         null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt         null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *installedFirmwareR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L installedFirmwareL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InstalledFirmwareColumns = struct {
	ID                string
	ServerComponentID string
	Version           string
	CreatedAt         string
	UpdatedAt         string
	DeletedAt         string
}{
	ID:                "id",
	ServerComponentID: "server_component_id",
	Version:           "version",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
	DeletedAt:         "deleted_at",
}

var InstalledFirmwareTableColumns = struct {
	ID                string
	ServerComponentID string
	Version           string
	CreatedAt         string
	UpdatedAt         string
	DeletedAt         string
}{
	ID:                "installed_firmware.id",
	ServerComponentID: "installed_firmware.server_component_id",
	Version:           "installed_firmware.version",
	CreatedAt:         "installed_firmware.created_at",
	UpdatedAt:         "installed_firmware.updated_at",
	DeletedAt:         "installed_firmware.deleted_at",
}

// Generated where

var InstalledFirmwareWhere = struct {
	ID                whereHelperstring
	ServerComponentID whereHelperstring
	Version           whereHelperstring
	CreatedAt         whereHelpernull_Time
	UpdatedAt         whereHelpernull_Time
	DeletedAt         whereHelpernull_Time
}{
	ID:                whereHelperstring{field: "\"installed_firmware\".\"id\""},
	ServerComponentID: whereHelperstring{field: "\"installed_firmware\".\"server_component_id\""},
	Version:           whereHelperstring{field: "\"installed_firmware\".\"version\""},
	CreatedAt:         whereHelpernull_Time{field: "\"installed_firmware\".\"created_at\""},
	UpdatedAt:         whereHelpernull_Time{field: "\"installed_firmware\".\"updated_at\""},
	DeletedAt:         whereHelpernull_Time{field: "\"installed_firmware\".\"deleted_at\""},
}

// InstalledFirmwareRels is where relationship names are stored.
var InstalledFirmwareRels = struct {
	ServerComponent string
}{
	ServerComponent: "ServerComponent",
}

// installedFirmwareR is where relationships are stored.
type installedFirmwareR struct {
	ServerComponent *ServerComponent `boil:"ServerComponent" json:"ServerComponent" toml:"ServerComponent" yaml:"ServerComponent"`
}

// NewStruct creates a new relationship struct
func (*installedFirmwareR) NewStruct() *installedFirmwareR {
	return &installedFirmwareR{}
}

func (r *installedFirmwareR) GetServerComponent() *ServerComponent {
	if r == nil {
		return nil
	}
	return r.ServerComponent
}

// installedFirmwareL is where Load methods for each relationship are stored.
type installedFirmwareL struct{}

var (
	installedFirmwareAllColumns            = []string{"id", "server_component_id", "version", "created_at", "updated_at", "deleted_at"}
	installedFirmwareColumnsWithoutDefault = []string{"server_component_id", "version"}
	installedFirmwareColumnsWithDefault    = []string{"id", "created_at", "updated_at", "deleted_at"}
	installedFirmwarePrimaryKeyColumns     = []string{"id"}
	installedFirmwareGeneratedColumns      = []string{}
)

type (
	// InstalledFirmwareSlice is an alias for a slice of pointers to InstalledFirmware.
	// This should almost always be used instead of []InstalledFirmware.
	InstalledFirmwareSlice []*InstalledFirmware
	// InstalledFirmwareHook is the signature for custom InstalledFirmware hook methods
	InstalledFirmwareHook func(context.Context, boil.ContextExecutor, *InstalledFirmware) error

	installedFirmwareQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	installedFirmwareType                 = reflect.TypeOf(&InstalledFirmware{})
	installedFirmwareMapping              = queries.MakeStructMapping(installedFirmwareType)
	installedFirmwarePrimaryKeyMapping, _ = queries.BindMapping(installedFirmwareType, installedFirmwareMapping, installedFirmwarePrimaryKeyColumns)
	installedFirmwareInsertCacheMut       sync.RWMutex
	installedFirmwareInsertCache          = make(map[string]insertCache)
	installedFirmwareUpdateCacheMut       sync.RWMutex
	installedFirmwareUpdateCache          = make(map[string]updateCache)
	installedFirmwareUpsertCacheMut       sync.RWMutex
	installedFirmwareUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var installedFirmwareAfterSelectHooks []InstalledFirmwareHook

var installedFirmwareBeforeInsertHooks []InstalledFirmwareHook
var installedFirmwareAfterInsertHooks []InstalledFirmwareHook

var installedFirmwareBeforeUpdateHooks []InstalledFirmwareHook
var installedFirmwareAfterUpdateHooks []InstalledFirmwareHook

var installedFirmwareBeforeDeleteHooks []InstalledFirmwareHook
var installedFirmwareAfterDeleteHooks []InstalledFirmwareHook

var installedFirmwareBeforeUpsertHooks []InstalledFirmwareHook
var installedFirmwareAfterUpsertHooks []InstalledFirmwareHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *InstalledFirmware) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range installedFirmwareAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *InstalledFirmware) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range installedFirmwareBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *InstalledFirmware) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range installedFirmwareAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *InstalledFirmware) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range installedFirmwareBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *InstalledFirmware) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range installedFirmwareAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *InstalledFirmware) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range installedFirmwareBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *InstalledFirmware) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range installedFirmwareAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *InstalledFirmware) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range installedFirmwareBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *InstalledFirmware) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range installedFirmwareAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInstalledFirmwareHook registers your hook function for all future operations.
func AddInstalledFirmwareHook(hookPoint boil.HookPoint, installedFirmwareHook InstalledFirmwareHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		installedFirmwareAfterSelectHooks = append(installedFirmwareAfterSelectHooks, installedFirmwareHook)
	case boil.BeforeInsertHook:
		installedFirmwareBeforeInsertHooks = append(installedFirmwareBeforeInsertHooks, installedFirmwareHook)
	case boil.AfterInsertHook:
		installedFirmwareAfterInsertHooks = append(installedFirmwareAfterInsertHooks, installedFirmwareHook)
	case boil.BeforeUpdateHook:
		installedFirmwareBeforeUpdateHooks = append(installedFirmwareBeforeUpdateHooks, installedFirmwareHook)
	case boil.AfterUpdateHook:
		installedFirmwareAfterUpdateHooks = append(installedFirmwareAfterUpdateHooks, installedFirmwareHook)
	case boil.BeforeDeleteHook:
		installedFirmwareBeforeDeleteHooks = append(installedFirmwareBeforeDeleteHooks, installedFirmwareHook)
	case boil.AfterDeleteHook:
		installedFirmwareAfterDeleteHooks = append(installedFirmwareAfterDeleteHooks, installedFirmwareHook)
	case boil.BeforeUpsertHook:
		installedFirmwareBeforeUpsertHooks = append(installedFirmwareBeforeUpsertHooks, installedFirmwareHook)
	case boil.AfterUpsertHook:
		installedFirmwareAfterUpsertHooks = append(installedFirmwareAfterUpsertHooks, installedFirmwareHook)
	}
}

// One returns a single installedFirmware record from the query.
func (q installedFirmwareQuery) One(ctx context.Context, exec boil.ContextExecutor) (*InstalledFirmware, error) {
	o := &InstalledFirmware{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for installed_firmware")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all InstalledFirmware records from the query.
func (q installedFirmwareQuery) All(ctx context.Context, exec boil.ContextExecutor) (InstalledFirmwareSlice, error) {
	var o []*InstalledFirmware

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to InstalledFirmware slice")
	}

	if len(installedFirmwareAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all InstalledFirmware records in the query.
func (q installedFirmwareQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count installed_firmware rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q installedFirmwareQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if installed_firmware exists")
	}

	return count > 0, nil
}

// ServerComponent pointed to by the foreign key.
func (o *InstalledFirmware) ServerComponent(mods ...qm.QueryMod) serverComponentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ServerComponentID),
	}

	queryMods = append(queryMods, mods...)

	return ServerComponents(queryMods...)
}

// LoadServerComponent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (installedFirmwareL) LoadServerComponent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInstalledFirmware interface{}, mods queries.Applicator) error {
	var slice []*InstalledFirmware
	var object *InstalledFirmware

	if singular {
		var ok bool
		object, ok = maybeInstalledFirmware.(*InstalledFirmware)
		if !ok {
			object = new(InstalledFirmware)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeInstalledFirmware)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeInstalledFirmware))
			}
		}
	} else {
		s, ok := maybeInstalledFirmware.(*[]*InstalledFirmware)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeInstalledFirmware)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeInstalledFirmware))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &installedFirmwareR{}
		}
		args = append(args, object.ServerComponentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &installedFirmwareR{}
			}

			for _, a := range args {
				if a == obj.ServerComponentID {
					continue Outer
				}
			}

			args = append(args, obj.ServerComponentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`server_components`),
		qm.WhereIn(`server_components.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ServerComponent")
	}

	var resultSlice []*ServerComponent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ServerComponent")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for server_components")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for server_components")
	}

	if len(serverComponentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ServerComponent = foreign
		if foreign.R == nil {
			foreign.R = &serverComponentR{}
		}
		foreign.R.InstalledFirmwares = append(foreign.R.InstalledFirmwares, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ServerComponentID == foreign.ID {
				local.R.ServerComponent = foreign
				if foreign.R == nil {
					foreign.R = &serverComponentR{}
				}
				foreign.R.InstalledFirmwares = append(foreign.R.InstalledFirmwares, local)
				break
			}
		}
	}

	return nil
}

// SetServerComponent of the installedFirmware to the related item.
// Sets o.R.ServerComponent to related.
// Adds o to related.R.InstalledFirmwares.
func (o *InstalledFirmware) SetServerComponent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServerComponent) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"installed_firmware\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"server_component_id"}),
		strmangle.WhereClause("\"", "\"", 2, installedFirmwarePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ServerComponentID = related.ID
	if o.R == nil {
		o.R = &installedFirmwareR{
			ServerComponent: related,
		}
	} else {
		o.R.ServerComponent = related
	}

	if related.R == nil {
		related.R = &serverComponentR{
			InstalledFirmwares: InstalledFirmwareSlice{o},
		}
	} else {
		related.R.InstalledFirmwares = append(related.R.InstalledFirmwares, o)
	}

	return nil
}

// InstalledFirmwares retrieves all the records using an executor.
func InstalledFirmwares(mods ...qm.QueryMod) installedFirmwareQuery {
	mods = append(mods, qm.From("\"installed_firmware\""), qmhelper.WhereIsNull("\"installed_firmware\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"installed_firmware\".*"})
	}

	return installedFirmwareQuery{q}
}

// FindInstalledFirmware retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInstalledFirmware(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*InstalledFirmware, error) {
	installedFirmwareObj := &InstalledFirmware{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"installed_firmware\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, installedFirmwareObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from installed_firmware")
	}

	if err = installedFirmwareObj.doAfterSelectHooks(ctx, exec); err != nil {
		return installedFirmwareObj, err
	}

	return installedFirmwareObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *InstalledFirmware) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no installed_firmware provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(installedFirmwareColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	installedFirmwareInsertCacheMut.RLock()
	cache, cached := installedFirmwareInsertCache[key]
	installedFirmwareInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			installedFirmwareAllColumns,
			installedFirmwareColumnsWithDefault,
			installedFirmwareColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(installedFirmwareType, installedFirmwareMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(installedFirmwareType, installedFirmwareMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"installed_firmware\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"installed_firmware\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into installed_firmware")
	}

	if !cached {
		installedFirmwareInsertCacheMut.Lock()
		installedFirmwareInsertCache[key] = cache
		installedFirmwareInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the InstalledFirmware.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *InstalledFirmware) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	installedFirmwareUpdateCacheMut.RLock()
	cache, cached := installedFirmwareUpdateCache[key]
	installedFirmwareUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			installedFirmwareAllColumns,
			installedFirmwarePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update installed_firmware, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"installed_firmware\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, installedFirmwarePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(installedFirmwareType, installedFirmwareMapping, append(wl, installedFirmwarePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update installed_firmware row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for installed_firmware")
	}

	if !cached {
		installedFirmwareUpdateCacheMut.Lock()
		installedFirmwareUpdateCache[key] = cache
		installedFirmwareUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q installedFirmwareQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for installed_firmware")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for installed_firmware")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InstalledFirmwareSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), installedFirmwarePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"installed_firmware\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, installedFirmwarePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in installedFirmware slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all installedFirmware")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *InstalledFirmware) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no installed_firmware provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(installedFirmwareColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	installedFirmwareUpsertCacheMut.RLock()
	cache, cached := installedFirmwareUpsertCache[key]
	installedFirmwareUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			installedFirmwareAllColumns,
			installedFirmwareColumnsWithDefault,
			installedFirmwareColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			installedFirmwareAllColumns,
			installedFirmwarePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert installed_firmware, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(installedFirmwarePrimaryKeyColumns))
			copy(conflict, installedFirmwarePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"installed_firmware\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(installedFirmwareType, installedFirmwareMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(installedFirmwareType, installedFirmwareMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert installed_firmware")
	}

	if !cached {
		installedFirmwareUpsertCacheMut.Lock()
		installedFirmwareUpsertCache[key] = cache
		installedFirmwareUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single InstalledFirmware record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *InstalledFirmware) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no InstalledFirmware provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), installedFirmwarePrimaryKeyMapping)
		sql = "DELETE FROM \"installed_firmware\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"installed_firmware\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(installedFirmwareType, installedFirmwareMapping, append(wl, installedFirmwarePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from installed_firmware")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for installed_firmware")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q installedFirmwareQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no installedFirmwareQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from installed_firmware")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for installed_firmware")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InstalledFirmwareSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(installedFirmwareBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), installedFirmwarePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"installed_firmware\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, installedFirmwarePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), installedFirmwarePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"installed_firmware\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, installedFirmwarePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from installedFirmware slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for installed_firmware")
	}

	if len(installedFirmwareAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *InstalledFirmware) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindInstalledFirmware(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InstalledFirmwareSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := InstalledFirmwareSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), installedFirmwarePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"installed_firmware\".* FROM \"installed_firmware\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, installedFirmwarePrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in InstalledFirmwareSlice")
	}

	*o = slice

	return nil
}

// InstalledFirmwareExists checks if the InstalledFirmware row exists.
func InstalledFirmwareExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"installed_firmware\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if installed_firmware exists")
	}

	return exists, nil
}

// Exists checks if the InstalledFirmware row exists.
func (o *InstalledFirmware) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return InstalledFirmwareExists(ctx, exec, o.ID)
}
