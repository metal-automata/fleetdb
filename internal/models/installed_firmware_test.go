// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testInstalledFirmwares(t *testing.T) {
	t.Parallel()

	query := InstalledFirmwares()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testInstalledFirmwaresSoftDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstalledFirmware{}
	if err = randomize.Struct(seed, o, installedFirmwareDBTypes, true, installedFirmwareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstalledFirmware struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InstalledFirmwares().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInstalledFirmwaresQuerySoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstalledFirmware{}
	if err = randomize.Struct(seed, o, installedFirmwareDBTypes, true, installedFirmwareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstalledFirmware struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := InstalledFirmwares().DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InstalledFirmwares().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInstalledFirmwaresSliceSoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstalledFirmware{}
	if err = randomize.Struct(seed, o, installedFirmwareDBTypes, true, installedFirmwareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstalledFirmware struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InstalledFirmwareSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InstalledFirmwares().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInstalledFirmwaresDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstalledFirmware{}
	if err = randomize.Struct(seed, o, installedFirmwareDBTypes, true, installedFirmwareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstalledFirmware struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InstalledFirmwares().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInstalledFirmwaresQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstalledFirmware{}
	if err = randomize.Struct(seed, o, installedFirmwareDBTypes, true, installedFirmwareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstalledFirmware struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := InstalledFirmwares().DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InstalledFirmwares().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInstalledFirmwaresSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstalledFirmware{}
	if err = randomize.Struct(seed, o, installedFirmwareDBTypes, true, installedFirmwareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstalledFirmware struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InstalledFirmwareSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InstalledFirmwares().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInstalledFirmwaresExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstalledFirmware{}
	if err = randomize.Struct(seed, o, installedFirmwareDBTypes, true, installedFirmwareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstalledFirmware struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := InstalledFirmwareExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if InstalledFirmware exists: %s", err)
	}
	if !e {
		t.Errorf("Expected InstalledFirmwareExists to return true, but got false.")
	}
}

func testInstalledFirmwaresFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstalledFirmware{}
	if err = randomize.Struct(seed, o, installedFirmwareDBTypes, true, installedFirmwareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstalledFirmware struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	installedFirmwareFound, err := FindInstalledFirmware(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if installedFirmwareFound == nil {
		t.Error("want a record, got nil")
	}
}

func testInstalledFirmwaresBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstalledFirmware{}
	if err = randomize.Struct(seed, o, installedFirmwareDBTypes, true, installedFirmwareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstalledFirmware struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = InstalledFirmwares().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testInstalledFirmwaresOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstalledFirmware{}
	if err = randomize.Struct(seed, o, installedFirmwareDBTypes, true, installedFirmwareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstalledFirmware struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := InstalledFirmwares().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testInstalledFirmwaresAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	installedFirmwareOne := &InstalledFirmware{}
	installedFirmwareTwo := &InstalledFirmware{}
	if err = randomize.Struct(seed, installedFirmwareOne, installedFirmwareDBTypes, false, installedFirmwareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstalledFirmware struct: %s", err)
	}
	if err = randomize.Struct(seed, installedFirmwareTwo, installedFirmwareDBTypes, false, installedFirmwareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstalledFirmware struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = installedFirmwareOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = installedFirmwareTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := InstalledFirmwares().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testInstalledFirmwaresCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	installedFirmwareOne := &InstalledFirmware{}
	installedFirmwareTwo := &InstalledFirmware{}
	if err = randomize.Struct(seed, installedFirmwareOne, installedFirmwareDBTypes, false, installedFirmwareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstalledFirmware struct: %s", err)
	}
	if err = randomize.Struct(seed, installedFirmwareTwo, installedFirmwareDBTypes, false, installedFirmwareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstalledFirmware struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = installedFirmwareOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = installedFirmwareTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InstalledFirmwares().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func installedFirmwareBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *InstalledFirmware) error {
	*o = InstalledFirmware{}
	return nil
}

func installedFirmwareAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *InstalledFirmware) error {
	*o = InstalledFirmware{}
	return nil
}

func installedFirmwareAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *InstalledFirmware) error {
	*o = InstalledFirmware{}
	return nil
}

func installedFirmwareBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *InstalledFirmware) error {
	*o = InstalledFirmware{}
	return nil
}

func installedFirmwareAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *InstalledFirmware) error {
	*o = InstalledFirmware{}
	return nil
}

func installedFirmwareBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *InstalledFirmware) error {
	*o = InstalledFirmware{}
	return nil
}

func installedFirmwareAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *InstalledFirmware) error {
	*o = InstalledFirmware{}
	return nil
}

func installedFirmwareBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *InstalledFirmware) error {
	*o = InstalledFirmware{}
	return nil
}

func installedFirmwareAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *InstalledFirmware) error {
	*o = InstalledFirmware{}
	return nil
}

func testInstalledFirmwaresHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &InstalledFirmware{}
	o := &InstalledFirmware{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, installedFirmwareDBTypes, false); err != nil {
		t.Errorf("Unable to randomize InstalledFirmware object: %s", err)
	}

	AddInstalledFirmwareHook(boil.BeforeInsertHook, installedFirmwareBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	installedFirmwareBeforeInsertHooks = []InstalledFirmwareHook{}

	AddInstalledFirmwareHook(boil.AfterInsertHook, installedFirmwareAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	installedFirmwareAfterInsertHooks = []InstalledFirmwareHook{}

	AddInstalledFirmwareHook(boil.AfterSelectHook, installedFirmwareAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	installedFirmwareAfterSelectHooks = []InstalledFirmwareHook{}

	AddInstalledFirmwareHook(boil.BeforeUpdateHook, installedFirmwareBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	installedFirmwareBeforeUpdateHooks = []InstalledFirmwareHook{}

	AddInstalledFirmwareHook(boil.AfterUpdateHook, installedFirmwareAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	installedFirmwareAfterUpdateHooks = []InstalledFirmwareHook{}

	AddInstalledFirmwareHook(boil.BeforeDeleteHook, installedFirmwareBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	installedFirmwareBeforeDeleteHooks = []InstalledFirmwareHook{}

	AddInstalledFirmwareHook(boil.AfterDeleteHook, installedFirmwareAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	installedFirmwareAfterDeleteHooks = []InstalledFirmwareHook{}

	AddInstalledFirmwareHook(boil.BeforeUpsertHook, installedFirmwareBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	installedFirmwareBeforeUpsertHooks = []InstalledFirmwareHook{}

	AddInstalledFirmwareHook(boil.AfterUpsertHook, installedFirmwareAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	installedFirmwareAfterUpsertHooks = []InstalledFirmwareHook{}
}

func testInstalledFirmwaresInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstalledFirmware{}
	if err = randomize.Struct(seed, o, installedFirmwareDBTypes, true, installedFirmwareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstalledFirmware struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InstalledFirmwares().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInstalledFirmwaresInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstalledFirmware{}
	if err = randomize.Struct(seed, o, installedFirmwareDBTypes, true); err != nil {
		t.Errorf("Unable to randomize InstalledFirmware struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(installedFirmwareColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := InstalledFirmwares().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInstalledFirmwareToOneServerComponentUsingServerComponent(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local InstalledFirmware
	var foreign ServerComponent

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, installedFirmwareDBTypes, false, installedFirmwareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstalledFirmware struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, serverComponentDBTypes, false, serverComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerComponent struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ServerComponentID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ServerComponent().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddServerComponentHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *ServerComponent) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := InstalledFirmwareSlice{&local}
	if err = local.L.LoadServerComponent(ctx, tx, false, (*[]*InstalledFirmware)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ServerComponent == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ServerComponent = nil
	if err = local.L.LoadServerComponent(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ServerComponent == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testInstalledFirmwareToOneSetOpServerComponentUsingServerComponent(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a InstalledFirmware
	var b, c ServerComponent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, installedFirmwareDBTypes, false, strmangle.SetComplement(installedFirmwarePrimaryKeyColumns, installedFirmwareColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, serverComponentDBTypes, false, strmangle.SetComplement(serverComponentPrimaryKeyColumns, serverComponentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serverComponentDBTypes, false, strmangle.SetComplement(serverComponentPrimaryKeyColumns, serverComponentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ServerComponent{&b, &c} {
		err = a.SetServerComponent(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ServerComponent != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.InstalledFirmwares[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ServerComponentID != x.ID {
			t.Error("foreign key was wrong value", a.ServerComponentID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ServerComponentID))
		reflect.Indirect(reflect.ValueOf(&a.ServerComponentID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ServerComponentID != x.ID {
			t.Error("foreign key was wrong value", a.ServerComponentID, x.ID)
		}
	}
}

func testInstalledFirmwaresReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstalledFirmware{}
	if err = randomize.Struct(seed, o, installedFirmwareDBTypes, true, installedFirmwareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstalledFirmware struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInstalledFirmwaresReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstalledFirmware{}
	if err = randomize.Struct(seed, o, installedFirmwareDBTypes, true, installedFirmwareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstalledFirmware struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InstalledFirmwareSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInstalledFirmwaresSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstalledFirmware{}
	if err = randomize.Struct(seed, o, installedFirmwareDBTypes, true, installedFirmwareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstalledFirmware struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := InstalledFirmwares().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	installedFirmwareDBTypes = map[string]string{`ID`: `uuid`, `ServerComponentID`: `uuid`, `Version`: `text`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`}
	_                        = bytes.MinRead
)

func testInstalledFirmwaresUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(installedFirmwarePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(installedFirmwareAllColumns) == len(installedFirmwarePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &InstalledFirmware{}
	if err = randomize.Struct(seed, o, installedFirmwareDBTypes, true, installedFirmwareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstalledFirmware struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InstalledFirmwares().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, installedFirmwareDBTypes, true, installedFirmwarePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InstalledFirmware struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testInstalledFirmwaresSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(installedFirmwareAllColumns) == len(installedFirmwarePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &InstalledFirmware{}
	if err = randomize.Struct(seed, o, installedFirmwareDBTypes, true, installedFirmwareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstalledFirmware struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InstalledFirmwares().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, installedFirmwareDBTypes, true, installedFirmwarePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InstalledFirmware struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(installedFirmwareAllColumns, installedFirmwarePrimaryKeyColumns) {
		fields = installedFirmwareAllColumns
	} else {
		fields = strmangle.SetComplement(
			installedFirmwareAllColumns,
			installedFirmwarePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := InstalledFirmwareSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testInstalledFirmwaresUpsert(t *testing.T) {
	t.Parallel()

	if len(installedFirmwareAllColumns) == len(installedFirmwarePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := InstalledFirmware{}
	if err = randomize.Struct(seed, &o, installedFirmwareDBTypes, true); err != nil {
		t.Errorf("Unable to randomize InstalledFirmware struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert InstalledFirmware: %s", err)
	}

	count, err := InstalledFirmwares().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, installedFirmwareDBTypes, false, installedFirmwarePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InstalledFirmware struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert InstalledFirmware: %s", err)
	}

	count, err = InstalledFirmwares().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
