// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testServerBMCS(t *testing.T) {
	t.Parallel()

	query := ServerBMCS()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testServerBMCSDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerBMC{}
	if err = randomize.Struct(seed, o, serverBMCDBTypes, true, serverBMCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerBMC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServerBMCS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServerBMCSQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerBMC{}
	if err = randomize.Struct(seed, o, serverBMCDBTypes, true, serverBMCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerBMC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ServerBMCS().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServerBMCS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServerBMCSSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerBMC{}
	if err = randomize.Struct(seed, o, serverBMCDBTypes, true, serverBMCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerBMC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ServerBMCSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServerBMCS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServerBMCSExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerBMC{}
	if err = randomize.Struct(seed, o, serverBMCDBTypes, true, serverBMCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerBMC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ServerBMCExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ServerBMC exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ServerBMCExists to return true, but got false.")
	}
}

func testServerBMCSFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerBMC{}
	if err = randomize.Struct(seed, o, serverBMCDBTypes, true, serverBMCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerBMC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	serverBMCFound, err := FindServerBMC(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if serverBMCFound == nil {
		t.Error("want a record, got nil")
	}
}

func testServerBMCSBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerBMC{}
	if err = randomize.Struct(seed, o, serverBMCDBTypes, true, serverBMCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerBMC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ServerBMCS().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testServerBMCSOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerBMC{}
	if err = randomize.Struct(seed, o, serverBMCDBTypes, true, serverBMCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerBMC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ServerBMCS().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testServerBMCSAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	serverBMCOne := &ServerBMC{}
	serverBMCTwo := &ServerBMC{}
	if err = randomize.Struct(seed, serverBMCOne, serverBMCDBTypes, false, serverBMCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerBMC struct: %s", err)
	}
	if err = randomize.Struct(seed, serverBMCTwo, serverBMCDBTypes, false, serverBMCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerBMC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = serverBMCOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = serverBMCTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ServerBMCS().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testServerBMCSCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	serverBMCOne := &ServerBMC{}
	serverBMCTwo := &ServerBMC{}
	if err = randomize.Struct(seed, serverBMCOne, serverBMCDBTypes, false, serverBMCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerBMC struct: %s", err)
	}
	if err = randomize.Struct(seed, serverBMCTwo, serverBMCDBTypes, false, serverBMCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerBMC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = serverBMCOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = serverBMCTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServerBMCS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func serverBMCBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ServerBMC) error {
	*o = ServerBMC{}
	return nil
}

func serverBMCAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ServerBMC) error {
	*o = ServerBMC{}
	return nil
}

func serverBMCAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ServerBMC) error {
	*o = ServerBMC{}
	return nil
}

func serverBMCBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ServerBMC) error {
	*o = ServerBMC{}
	return nil
}

func serverBMCAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ServerBMC) error {
	*o = ServerBMC{}
	return nil
}

func serverBMCBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ServerBMC) error {
	*o = ServerBMC{}
	return nil
}

func serverBMCAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ServerBMC) error {
	*o = ServerBMC{}
	return nil
}

func serverBMCBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ServerBMC) error {
	*o = ServerBMC{}
	return nil
}

func serverBMCAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ServerBMC) error {
	*o = ServerBMC{}
	return nil
}

func testServerBMCSHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ServerBMC{}
	o := &ServerBMC{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, serverBMCDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ServerBMC object: %s", err)
	}

	AddServerBMCHook(boil.BeforeInsertHook, serverBMCBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	serverBMCBeforeInsertHooks = []ServerBMCHook{}

	AddServerBMCHook(boil.AfterInsertHook, serverBMCAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	serverBMCAfterInsertHooks = []ServerBMCHook{}

	AddServerBMCHook(boil.AfterSelectHook, serverBMCAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	serverBMCAfterSelectHooks = []ServerBMCHook{}

	AddServerBMCHook(boil.BeforeUpdateHook, serverBMCBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	serverBMCBeforeUpdateHooks = []ServerBMCHook{}

	AddServerBMCHook(boil.AfterUpdateHook, serverBMCAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	serverBMCAfterUpdateHooks = []ServerBMCHook{}

	AddServerBMCHook(boil.BeforeDeleteHook, serverBMCBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	serverBMCBeforeDeleteHooks = []ServerBMCHook{}

	AddServerBMCHook(boil.AfterDeleteHook, serverBMCAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	serverBMCAfterDeleteHooks = []ServerBMCHook{}

	AddServerBMCHook(boil.BeforeUpsertHook, serverBMCBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	serverBMCBeforeUpsertHooks = []ServerBMCHook{}

	AddServerBMCHook(boil.AfterUpsertHook, serverBMCAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	serverBMCAfterUpsertHooks = []ServerBMCHook{}
}

func testServerBMCSInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerBMC{}
	if err = randomize.Struct(seed, o, serverBMCDBTypes, true, serverBMCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerBMC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServerBMCS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testServerBMCSInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerBMC{}
	if err = randomize.Struct(seed, o, serverBMCDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ServerBMC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(serverBMCColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ServerBMCS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testServerBMCToOneHardwareModelUsingHardwareModel(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ServerBMC
	var foreign HardwareModel

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, serverBMCDBTypes, false, serverBMCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerBMC struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, hardwareModelDBTypes, false, hardwareModelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareModel struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.HardwareModelID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.HardwareModel().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddHardwareModelHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *HardwareModel) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ServerBMCSlice{&local}
	if err = local.L.LoadHardwareModel(ctx, tx, false, (*[]*ServerBMC)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.HardwareModel == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.HardwareModel = nil
	if err = local.L.LoadHardwareModel(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.HardwareModel == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testServerBMCToOneHardwareVendorUsingHardwareVendor(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ServerBMC
	var foreign HardwareVendor

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, serverBMCDBTypes, false, serverBMCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerBMC struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, hardwareVendorDBTypes, false, hardwareVendorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HardwareVendor struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.HardwareVendorID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.HardwareVendor().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddHardwareVendorHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *HardwareVendor) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ServerBMCSlice{&local}
	if err = local.L.LoadHardwareVendor(ctx, tx, false, (*[]*ServerBMC)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.HardwareVendor == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.HardwareVendor = nil
	if err = local.L.LoadHardwareVendor(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.HardwareVendor == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testServerBMCToOneServerUsingServer(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ServerBMC
	var foreign Server

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, serverBMCDBTypes, false, serverBMCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerBMC struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, serverDBTypes, false, serverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Server struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ServerID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Server().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddServerHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Server) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ServerBMCSlice{&local}
	if err = local.L.LoadServer(ctx, tx, false, (*[]*ServerBMC)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Server == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Server = nil
	if err = local.L.LoadServer(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Server == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testServerBMCToOneSetOpHardwareModelUsingHardwareModel(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServerBMC
	var b, c HardwareModel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serverBMCDBTypes, false, strmangle.SetComplement(serverBMCPrimaryKeyColumns, serverBMCColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, hardwareModelDBTypes, false, strmangle.SetComplement(hardwareModelPrimaryKeyColumns, hardwareModelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, hardwareModelDBTypes, false, strmangle.SetComplement(hardwareModelPrimaryKeyColumns, hardwareModelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*HardwareModel{&b, &c} {
		err = a.SetHardwareModel(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.HardwareModel != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ServerBMCS[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.HardwareModelID != x.ID {
			t.Error("foreign key was wrong value", a.HardwareModelID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.HardwareModelID))
		reflect.Indirect(reflect.ValueOf(&a.HardwareModelID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.HardwareModelID != x.ID {
			t.Error("foreign key was wrong value", a.HardwareModelID, x.ID)
		}
	}
}
func testServerBMCToOneSetOpHardwareVendorUsingHardwareVendor(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServerBMC
	var b, c HardwareVendor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serverBMCDBTypes, false, strmangle.SetComplement(serverBMCPrimaryKeyColumns, serverBMCColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, hardwareVendorDBTypes, false, strmangle.SetComplement(hardwareVendorPrimaryKeyColumns, hardwareVendorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, hardwareVendorDBTypes, false, strmangle.SetComplement(hardwareVendorPrimaryKeyColumns, hardwareVendorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*HardwareVendor{&b, &c} {
		err = a.SetHardwareVendor(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.HardwareVendor != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ServerBMCS[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.HardwareVendorID != x.ID {
			t.Error("foreign key was wrong value", a.HardwareVendorID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.HardwareVendorID))
		reflect.Indirect(reflect.ValueOf(&a.HardwareVendorID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.HardwareVendorID != x.ID {
			t.Error("foreign key was wrong value", a.HardwareVendorID, x.ID)
		}
	}
}
func testServerBMCToOneSetOpServerUsingServer(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServerBMC
	var b, c Server

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serverBMCDBTypes, false, strmangle.SetComplement(serverBMCPrimaryKeyColumns, serverBMCColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, serverDBTypes, false, strmangle.SetComplement(serverPrimaryKeyColumns, serverColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serverDBTypes, false, strmangle.SetComplement(serverPrimaryKeyColumns, serverColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Server{&b, &c} {
		err = a.SetServer(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Server != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ServerBMC != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ServerID != x.ID {
			t.Error("foreign key was wrong value", a.ServerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ServerID))
		reflect.Indirect(reflect.ValueOf(&a.ServerID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ServerID != x.ID {
			t.Error("foreign key was wrong value", a.ServerID, x.ID)
		}
	}
}

func testServerBMCSReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerBMC{}
	if err = randomize.Struct(seed, o, serverBMCDBTypes, true, serverBMCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerBMC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testServerBMCSReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerBMC{}
	if err = randomize.Struct(seed, o, serverBMCDBTypes, true, serverBMCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerBMC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ServerBMCSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testServerBMCSSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerBMC{}
	if err = randomize.Struct(seed, o, serverBMCDBTypes, true, serverBMCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerBMC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ServerBMCS().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	serverBMCDBTypes = map[string]string{`ID`: `uuid`, `ServerID`: `uuid`, `HardwareVendorID`: `uuid`, `HardwareModelID`: `uuid`, `Username`: `text`, `IPAddress`: `inet`, `MacAddress`: `macaddr`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`}
	_                = bytes.MinRead
)

func testServerBMCSUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(serverBMCPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(serverBMCAllColumns) == len(serverBMCPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ServerBMC{}
	if err = randomize.Struct(seed, o, serverBMCDBTypes, true, serverBMCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerBMC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServerBMCS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, serverBMCDBTypes, true, serverBMCPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServerBMC struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testServerBMCSSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(serverBMCAllColumns) == len(serverBMCPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ServerBMC{}
	if err = randomize.Struct(seed, o, serverBMCDBTypes, true, serverBMCColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerBMC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServerBMCS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, serverBMCDBTypes, true, serverBMCPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServerBMC struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(serverBMCAllColumns, serverBMCPrimaryKeyColumns) {
		fields = serverBMCAllColumns
	} else {
		fields = strmangle.SetComplement(
			serverBMCAllColumns,
			serverBMCPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ServerBMCSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testServerBMCSUpsert(t *testing.T) {
	t.Parallel()

	if len(serverBMCAllColumns) == len(serverBMCPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ServerBMC{}
	if err = randomize.Struct(seed, &o, serverBMCDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ServerBMC struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ServerBMC: %s", err)
	}

	count, err := ServerBMCS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, serverBMCDBTypes, false, serverBMCPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServerBMC struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ServerBMC: %s", err)
	}

	count, err = ServerBMCS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
